<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>EtherealBoyJiang</title>
        <link>https://thelonelypatient.github.io/Jiang/</link>
        <description>Recent content on EtherealBoyJiang</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>EtherealBoyJiang</copyright>
        <lastBuildDate>Tue, 19 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://thelonelypatient.github.io/Jiang/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>JmeterHTTP请求</title>
        <link>https://thelonelypatient.github.io/Jiang/p/jmeterhttp%E8%AF%B7%E6%B1%82/</link>
        <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/p/jmeterhttp%E8%AF%B7%E6%B1%82/</guid>
        <description>&lt;img src="https://thelonelypatient.github.io/Jiang/img/Jmeter/0.png" alt="Featured image of post JmeterHTTP请求" /&gt;&lt;h1 id=&#34;http请求&#34;&gt;&lt;em&gt;HTTP请求&lt;/em&gt;&lt;/h1&gt;
</description>
        </item>
        <item>
        <title>Jmeter线程组</title>
        <link>https://thelonelypatient.github.io/Jiang/p/jmeter%E7%BA%BF%E7%A8%8B%E7%BB%84/</link>
        <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/p/jmeter%E7%BA%BF%E7%A8%8B%E7%BB%84/</guid>
        <description>&lt;img src="https://thelonelypatient.github.io/Jiang/img/Jmeter/0.png" alt="Featured image of post Jmeter线程组" /&gt;&lt;h1 id=&#34;线程组&#34;&gt;线程组&lt;/h1&gt;
&lt;p&gt;线程组作为JMeter测试计划的核心组件之一，对于模拟并发用户的行为至关重要。线程组元件是整个测试计划的入口，所有的取样器和控制器必须放置在线程组下。将线程组视为一个虚拟用户池，其中每个线程可被理解为一个虚拟用户，多个虚拟用户同时执行相同的一批任务。在这个虚拟用户池中，每个线程之间是相互隔离且互不影响的。每个线程的执行过程中，操作的变量不会对其他线程的变量值产生影响。&lt;/p&gt;
&lt;p&gt;线程组分为四类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线程组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;setUp线程组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tearDown线程组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放模型线程组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程组、setUp线程组、tearDown线程组控制面板中的元素基本一致：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;名称、注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在取样器错误后执行的动作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ramp-Up时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Same user on each iteration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟创建线程直到需要（只有线程组有）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开放模型线程组控制面板中的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;名称、注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在取样器错误后执行的动作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度计划&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机种子&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;执行顺序&#34;&gt;执行顺序&lt;/h2&gt;
&lt;p&gt;在JMeter中，&lt;code&gt;setUp线程组&lt;/code&gt;拥有最高的优先级，而&lt;code&gt;tearDown线程组&lt;/code&gt;则具有最低的优先级。这一优先级关系可用表达式表示为：&lt;code&gt;setUp线程组 &amp;gt; 线程组 = 开放模型线程组 &amp;gt; tearDown线程组&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这意味着在测试计划执行过程中，&lt;code&gt;setUp线程组&lt;/code&gt;将首先执行，其后是&lt;code&gt;线程组&lt;/code&gt;和&lt;code&gt;开放模型线程组&lt;/code&gt;，最后执行&lt;code&gt;tearDown线程组&lt;/code&gt;。通常情况下，&lt;code&gt;setUp线程组&lt;/code&gt;用于在测试执行之前进行一些初始化工作，而&lt;code&gt;tearDown线程组&lt;/code&gt;用于测试执行结束后的清理工作。其他线程组在测试执行过程中按照它们在测试计划中的顺序执行。&lt;/p&gt;
&lt;p&gt;这种优先级的设定确保了在测试的前后可以进行一些全局性的准备和清理工作，以确保测试环境的稳定性和一致性。这种有序的执行流程使得在性能测试中能够更灵活地控制测试场景，并确保测试的准确性和可重复性。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/ThreadGroup/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;threadgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 接口设置了休眠三秒，即接口在接收到请求数据三秒后，返回响应数据。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; 请求方式错误！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ThreadGroupName&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;请求参数错误!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;线程组类型是：&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ThreadGroupName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，分别添加&lt;font style=&#34;background-color: #efef48&#34;&gt;tearDown线程组、线程组、setUp线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;tearDown线程组、线程组、setUp线程组&lt;/font&gt;下分别添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求&lt;/font&gt; 取样器&lt;/p&gt;
&lt;p&gt;名称分别为：&lt;code&gt;tearDown线程组请求&lt;/code&gt;、&lt;code&gt;线程组请求&lt;/code&gt;、&lt;code&gt;setUp线程组请求&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/ThreadGroup/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;消息体数据分别为：&lt;p&gt;&lt;code&gt;{&amp;ldquo;ThreadGroupName&amp;rdquo;: &amp;ldquo;tearDown线程组请求&amp;rdquo;}&lt;/code&gt;&lt;br&gt;&lt;code&gt;{&amp;ldquo;ThreadGroupName&amp;rdquo;: &amp;ldquo;线程组请求&amp;rdquo;}&lt;/code&gt;&lt;br&gt;&lt;code&gt;{&amp;ldquo;ThreadGroupName&amp;rdquo;: &amp;ldquo;setUp线程组请求&amp;rdquo;}&lt;/code&gt;&lt;/P&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;tearDown线程组请求、线程组请求、setUp线程组请求取样器&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP信息头管理器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称：&lt;code&gt;Content-Type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;值：&lt;code&gt;application/json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行查看结果树&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;setUp线程组请求的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:setUp 线程组 1-1 1-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-02-01 11:30:38 CST&lt;/font&gt;&lt;br&gt;Load time:3009&lt;br&gt;Connect Time:2&lt;br&gt;Latency:3009&lt;br&gt;Size in bytes:266&lt;br&gt;Sent bytes:210&lt;br&gt;Headers size in bytes:224&lt;br&gt;Body size in bytes:100&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;br&gt;&lt;br&gt;&lt;br&gt;HTTPSampleResult fields:&lt;br&gt;ContentType: application/json&lt;br&gt;DataEncoding: null&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;线程组请求的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:线程组 1-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-02-01 11:30:41 CST&lt;/font&gt;&lt;br&gt;Load time:3004&lt;br&gt;Connect Time:1&lt;br&gt;Latency:3004&lt;br&gt;Size in bytes:260&lt;br&gt;Sent bytes:219&lt;br&gt;Headers size in bytes:165&lt;br&gt;Body size in bytes:95&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;br&gt;&lt;br&gt;&lt;br&gt;HTTPSampleResult fields:&lt;br&gt;ContentType: application/json&lt;br&gt;DataEncoding: null&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;tearDown线程组请求的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:tearDown 线程组 1-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-02-01 11:30:44 CST&lt;/font&gt;&lt;br&gt;Load time:3005&lt;br&gt;Connect Time:2&lt;br&gt;Latency:3005&lt;br&gt;Size in bytes:269&lt;br&gt;Sent bytes:227&lt;br&gt;Headers size in bytes:166&lt;br&gt;Body size in bytes:103&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;br&gt;&lt;br&gt;&lt;br&gt;HTTPSampleResult fields:&lt;br&gt;ContentType: application/json&lt;br&gt;DataEncoding: null&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以观察到在中国标准时间（CST）&lt;code&gt;2024-02-01 11:30:38&lt;/code&gt; 时，&lt;code&gt;setUp线程组请求取样器&lt;/code&gt;发送了请求；随后，在 &lt;code&gt;2024-02-01 11:30:41&lt;/code&gt; CST，&lt;code&gt;线程组请求取样器&lt;/code&gt;也发出了请求；最后，在 &lt;code&gt;2024-02-01 11:30:44&lt;/code&gt; CST，&lt;code&gt;tearDown线程组请求取样器&lt;/code&gt;发出了请求。&lt;/p&gt;
&lt;p&gt;这与接口设置的休眠时间一致，表明 JMeter 在接收到&lt;code&gt;setUp线程组请求取样器&lt;/code&gt;的响应后，执行了线程组操作，然后在接收到&lt;code&gt;线程组请求取样器&lt;/code&gt;的响应后，执行了 &lt;code&gt;tearDown线程组&lt;/code&gt; 操作。&lt;/p&gt;
&lt;p&gt;总体来说，执行顺序可以归纳为：&lt;code&gt;setUp线程组&lt;/code&gt; &amp;gt; &lt;code&gt;线程组&lt;/code&gt; &amp;gt; &lt;code&gt;开放模型线程组&lt;/code&gt; &amp;gt; &lt;code&gt;tearDown线程组&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;结语&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;JMeter提供的&lt;code&gt;setUp线程组&lt;/code&gt;和&lt;code&gt;tearDown线程组&lt;/code&gt;功能为我们提供了很多便利。通过使用这两个线程组，我们能够执行一些必要的前置和后置操作，以更有效地进行性能测试。&lt;/p&gt;
&lt;p&gt;举例来说，&lt;code&gt;setUp线程组&lt;/code&gt;可用于执行诸如登录、数据库查询等前置操作。这允许我们在性能测试开始前设置测试环境，确保系统处于一种预期的状态，从而更准确地模拟实际用户行为。&lt;/p&gt;
&lt;p&gt;另一方面，&lt;code&gt;tearDown线程组&lt;/code&gt;可以用于执行一些关键的清理和还原操作，如删除数据库记录、退出登录等。这有助于确保在测试执行完成后系统状态得到有效还原，减少测试对系统的影响，并提供一致性的测试结果。&lt;/p&gt;
&lt;p&gt;综合而言，通过巧妙地利用&lt;code&gt;setUp线程组&lt;/code&gt;和&lt;code&gt;tearDown线程组&lt;/code&gt;，我们能够更方便地进行性能测试，确保测试环境的准备和清理工作得到有效管理，从而提高测试的可重复性和准确性。&lt;/p&gt;
&lt;p&gt;在测试计划中，同类型线程组的执行顺序可以通过勾选或不勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;来控制。勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，则同类型线程组按照从上至下的顺序依次执行；反之，则同类型线程组并发执行。&lt;/p&gt;
&lt;h2 id=&#34;线程数&#34;&gt;&lt;em&gt;线程数&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;线程组中的线程数指的是同时运行的虚拟用户数量。这个数量决定了你的测试将模拟多少个用户同时访问目标应用程序或服务。&lt;/p&gt;
&lt;p&gt;在JMeter的线程组配置中，你可以根据你的需求来设置线程数，通常是根据你想要模拟的用户负载量和你的系统资源来决定的。&lt;/p&gt;
&lt;p&gt;需要注意的是，线程数设置得太高可能会导致测试机器资源不足，影响测试结果的准确性；而设置得太低可能无法模拟真实的负载情况。因此，需要根据具体情况进行合理的设置。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-1&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/QuickUse/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Jmeter教程快速开始api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request method is not GET!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;It is successful!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-1&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下，添加1个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;线程数：&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/QuickUse/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行查看结果树-1&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;用户1-1的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;Thread Name:线程组 1-1&lt;/font&gt;&lt;br&gt;Sample Start:2024-03-07 13:38:46 CST&lt;br&gt;Load time:34&lt;br&gt;Connect Time:24&lt;br&gt;Latency:30&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;用户1-2的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;Thread Name:线程组 1-2&lt;/font&gt;&lt;br&gt;Sample Start:2024-03-07 13:38:46 CST&lt;br&gt;Load time:2&lt;br&gt;Connect Time:1&lt;br&gt;Latency:2&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;用户1-3的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;Thread Name:线程组 1-3&lt;/font&gt;&lt;br&gt;Sample Start:2024-03-07 13:38:46 CST&lt;br&gt;Load time:4&lt;br&gt;Connect Time:1&lt;br&gt;Latency:4&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看出取样器结果中的Thread Name分别为&lt;code&gt;线程组 1-1&lt;/code&gt;、&lt;code&gt;线程组 1-2&lt;/code&gt;、&lt;code&gt;线程组 1-3&lt;/code&gt;，这是因为&lt;code&gt;线程组&lt;/code&gt;中&lt;code&gt;线程数&lt;/code&gt;值为&lt;code&gt;3&lt;/code&gt;，Jmeter启功了3个线程，每个线程皆执行1次&lt;code&gt;线程组&lt;/code&gt;。在Jmeter中1个线程就代表1个用户，现在就相当于3个用户一起执行&lt;code&gt;线程组&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;结语-1&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;在JMeter中，线程数是指在测试计划中设置的虚拟用户数。这些虚拟用户模拟真实用户的行为，对目标服务器进行请求。设置线程数的目的是为了模拟高负载情况下系统的性能表现。&lt;/p&gt;
&lt;p&gt;线程数的设置通常在JMeter的&lt;code&gt;线程组&lt;/code&gt;组件中进行。一个线程组可以包含一个或多个线程，每个线程模拟一个用户。通过增加线程数，可以模拟更多的并发用户，从而测试系统在高并发情况下的性能。&lt;/p&gt;
&lt;p&gt;设置线程数时，需要考虑以下几个因素：&lt;/p&gt;
&lt;p&gt;测试目标：根据你要测试的应用程序的预期负载来设置线程数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;系统资源：确保JMeter机器有足够的资源来管理这些线程。过多的线程可能会导致JMeter机器资源耗尽。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器容量：线程数不应超过目标服务器的容量，否则可能会导致服务器崩溃或响应缓慢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合理地设置线程数对于获得准确的性能测试结果至关重要。通常建议从小规模的线程数开始，逐渐增加，直到达到预期的测试目标或服务器的性能瓶颈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;循环次数&#34;&gt;&lt;em&gt;循环次数&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;线程组中的循环次数指的是用户执行测试计划的次数。这个数量决定了你的测试将模拟用户访问目标应用程序或服务的次数。&lt;/p&gt;
&lt;p&gt;在JMeter的线程组配置中，你可以根据你的需求来设置循环次数，通常是根据你想要模拟的用户访问上限值，如抽奖次数。&lt;/p&gt;
&lt;p&gt;需要注意的是，循环次数设置得太高，特别设置循环次数为永远，可能会导致测试机器资源不足，影响测试结果的准确性；而设置得太低可能无法达到测试要求。因此，需要根据具体情况进行合理的设置。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-2&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/QuickUse/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Jmeter教程快速开始api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request method is not GET!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;It is successful!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-2&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下，添加1个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;循环次数：&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/QuickUse/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行查看结果树-2&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;Thread Name:线程组 1-1&lt;/font&gt;&lt;br&gt;Sample Start:2024-03-07 13:38:46 CST&lt;br&gt;Load time:3&lt;br&gt;Connect Time:1&lt;br&gt;Latency:3&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;Thread Name:线程组 1-1&lt;/font&gt;&lt;br&gt;Sample Start:2024-03-07 13:38:46 CST&lt;br&gt;Load time:2&lt;br&gt;Connect Time:1&lt;br&gt;Latency:1&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;Thread Name:线程组 1-1&lt;/font&gt;&lt;br&gt;Sample Start:2024-03-07 13:38:46 CST&lt;br&gt;Load time:1&lt;br&gt;Connect Time:0&lt;br&gt;Latency:1&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看出取样器结果中的Thread Name皆为&lt;code&gt;线程组 1-1&lt;/code&gt;，这是因为&lt;code&gt;线程组&lt;/code&gt;中&lt;code&gt;循环次数&lt;/code&gt;值为&lt;code&gt;3&lt;/code&gt;，Jmeter启功了1个线程，连续执行了3次&lt;code&gt;线程组&lt;/code&gt;。在Jmeter中1个线程就代表1个用户，现在就相当于1个用户执行了3次&lt;code&gt;线程组&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;结语-2&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;在JMeter中，循环次数是指每个线程（即虚拟用户）执行其测试计划的次数。这是JMeter线程组中的一个重要设置，它决定了每个线程将重复执行其包含的采样器和其他配置元素的次数。&lt;/p&gt;
&lt;p&gt;设置循环次数时，需要考虑以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试目的&lt;/strong&gt;：根据你的测试目标来决定循环次数。例如，如果你想要模拟用户在一定时间内持续访问某个页面，那么你可能需要设置较高的循环次数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试持续时间&lt;/strong&gt;：循环次数与测试持续时间（如果设置了）共同决定测试的总执行次数。如果设置了持续时间，那么循环次数实际上决定了在持续时间结束前每个线程尝试执行的总次数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器负载&lt;/strong&gt;：循环次数的增加可能会导致服务器负载的增加。因此，在设置时需要考虑目标服务器的承受能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试资源&lt;/strong&gt;：高循环次数可能会增加JMeter的资源消耗，因此需要确保JMeter有足够的资源来处理这些请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在实际的测试场景中，通常建议先从较小的循环次数开始，然后根据测试结果和需求逐渐增加，直到达到满意的测试效果。&lt;/p&gt;
&lt;h2 id=&#34;取样器错误后执行的动作&#34;&gt;&lt;em&gt;取样器错误后执行的动作&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;在JMeter中，取样器（Sampler）是用于模拟用户请求发送到目标服务器的组件，例如HTTP请求、FTP请求等。当取样器执行过程中出现错误时，可以通过配置相应的动作来处理这些错误。以下是一些处理取样器错误时，线程组中常见方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;停止测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;立即停止测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;停止线程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动下一进程循环&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继续&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过合理配置这些错误处理方式，可以根据测试需求和场景来控制测试计划的行为，确保对错误有适当的响应和处理。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-3&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/ThreadGroup1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;threadgroup1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# `错误请求`立即返回&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;嘿！我有响应！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 延长非`错误请求`的请求时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;嘿！我有响应！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-3&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，添加2个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称分别为：&lt;code&gt;线程组1&lt;/code&gt;、&lt;code&gt;线程组2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中，添加3个&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称分别为：&lt;code&gt;错误请求1&lt;/code&gt;、&lt;code&gt;未加固定定时器&lt;/code&gt;、&lt;code&gt;错误请求之后请求1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/ThreadGroup1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;div style=&#34;margin-left: 10%;&#34;&gt;&lt;p&gt;错误请求：&lt;code&gt;GET&lt;/code&gt;&lt;br&gt;未加固定定时器、错误请求之后请求1：&lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;中，添加2个&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称分别为：&lt;code&gt;与错误请求并行请求2&lt;/code&gt;、&lt;code&gt;错误请求之后请求2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/ThreadGroup1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1、2取样器&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;固定定时器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;线程延迟（毫秒）：&lt;code&gt;3000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求取样器&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;响应断言&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;注释：&lt;code&gt;接口响应与断言值不匹配，则判断该请求出错&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加响应值：&lt;code&gt;1111&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;错误请求取样器&lt;/code&gt;中的&lt;code&gt;响应断言&lt;/code&gt;用于判断接口的响应是否与预期的值匹配，如果不匹配，则认为该请求出错。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;固定定时器&lt;/code&gt;延迟4秒，可以保证&lt;code&gt;错误请求之后请求2&lt;/code&gt;在&lt;code&gt;错误请求1&lt;/code&gt;结束后执行。&lt;/p&gt;
&lt;h3 id=&#34;停止测试&#34;&gt;&lt;em&gt;停止测试&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;设置&lt;code&gt;取样器错误后执行的动作&lt;/code&gt;为&lt;code&gt;停止测试&lt;/code&gt;时，一旦任何一个取样器遇到错误，整个测试计划将会在所有当前正在执行的线程执行完毕后停止。这可以用于模拟在测试过程中发生重要错误或异常时的行为。&lt;/p&gt;
&lt;p&gt;这种设置确保在测试执行中任何关键的错误都会导致测试的终止，以便进行及时的识别和处理。这对于模拟真实世界中的异常情况以及确保测试的准确性和可重复性都是非常重要的。&lt;/p&gt;
&lt;h4 id=&#34;多线程组&#34;&gt;&lt;em&gt;多线程组&lt;/em&gt;&lt;/h4&gt;
&lt;h5 id=&#34;修改示例脚本&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;前&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-3&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了2次，但结果却不尽相同，与预期不符。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中勾选了&lt;code&gt;独立运行每个线程组&lt;/code&gt;后，&lt;code&gt;线程组1&lt;/code&gt;与&lt;code&gt;线程组2&lt;/code&gt;互不干扰且顺序执行，因此，先执行&lt;code&gt;线程组1&lt;/code&gt;时出现错误请求，不会影响到执行&lt;code&gt;线程组2&lt;/code&gt;。但是结果是&lt;code&gt;线程组2&lt;/code&gt;有概率不会执行。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-1&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;后&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-4&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/2.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果保持一致，与预期相符。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中勾选了&lt;code&gt;独立运行每个线程组&lt;/code&gt;，所以&lt;code&gt;线程组2&lt;/code&gt;与&lt;code&gt;线程组1&lt;/code&gt;互不干扰且顺序执行。因此，先执行&lt;code&gt;线程组2&lt;/code&gt;，待&lt;code&gt;线程组1&lt;/code&gt;中出现错误请求时，测试计划停止测试。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-2&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中取消勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-5&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/3.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中未勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，因此&lt;code&gt;线程组2&lt;/code&gt;与&lt;code&gt;线程组1&lt;/code&gt;互相干扰且并行执行。当&lt;code&gt;线程组1&lt;/code&gt;中出现错误请求时，&lt;code&gt;线程组2&lt;/code&gt;中的&lt;code&gt;与错误请求并行请求2&lt;/code&gt;也在执行，直到&lt;code&gt;与错误请求并行请求2&lt;/code&gt;结束后，测试计划才停止测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;测试计划&lt;/code&gt;中勾选了“独立运行每个线程组”，不建议非最后排序的&lt;code&gt;线程组&lt;/code&gt;中&lt;code&gt;取样器错误后执行的动作&lt;/code&gt;设置为&lt;code&gt;停止测试&lt;/code&gt;，它并不会按照你的预期去执行。&lt;/p&gt;
&lt;h4 id=&#34;单线程组&#34;&gt;&lt;em&gt;单线程组&lt;/em&gt;&lt;/h4&gt;
&lt;h5 id=&#34;修改示例脚本-3&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;未加固定定时器&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;前&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-6&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/7.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;先执行&lt;code&gt;未加固定定时器&lt;/code&gt;请求，待&lt;code&gt;错误请求1&lt;/code&gt;中出现错误请求时，测试计划停止测试。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-4&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;/font&gt;线程数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-7&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/8.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;3个用户同时执行&lt;code&gt;线程组1&lt;/code&gt;。3个用户中其中1个用户执行&lt;code&gt;错误请求1&lt;/code&gt;出现错误时，另外2个用户还在执行&lt;code&gt;错误请求之后请求1&lt;/code&gt;，待执行完毕后，测试计划停止测试。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-5&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;循环数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-8&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/9.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行，1个用户执行&lt;code&gt;线程组1&lt;/code&gt;3次。用户在执行第1次&lt;code&gt;错误请求1&lt;/code&gt;出现错误时，测试计划停止测试。&lt;/p&gt;
&lt;h3 id=&#34;立即停止测试&#34;&gt;&lt;em&gt;立即停止测试&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;设置&lt;code&gt;取样器错误后执行的动作&lt;/code&gt;为&lt;code&gt;立即停止测试&lt;/code&gt;时，当取样器在执行过程中遇到错误时，JMeter会立即停止当前运行的测试，不再执行任何后续的请求或操作。&lt;/p&gt;
&lt;p&gt;这有助于保护应用程序免受可能导致问题的异常或错误的影响，并确保测试结果的准确性。&lt;/p&gt;
&lt;p&gt;这种设置对于测试场景中的稳定性和可靠性非常重要，特别是在模拟并发用户或大负载情况下，能够及时发现问题并停止测试，有助于减少潜在的影响和损害。&lt;/p&gt;
&lt;h4 id=&#34;多线程组-1&#34;&gt;&lt;em&gt;多线程组&lt;/em&gt;&lt;/h4&gt;
&lt;h5 id=&#34;修改示例脚本-6&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;前&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-9&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/4.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了4次，但结果却不尽相同，与预期不符。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中勾选了&lt;code&gt;独立运行每个线程组&lt;/code&gt;后，&lt;code&gt;线程组1&lt;/code&gt;与&lt;code&gt;线程组2&lt;/code&gt;互不干扰且顺序执行。因此，若&lt;code&gt;线程组1&lt;/code&gt;中出现错误请求时,不会影响到执行&lt;code&gt;线程组2&lt;/code&gt;。但是结果是&lt;code&gt;线程组2&lt;/code&gt;有概率不会执行。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-7&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;后&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-10&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/5.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了4次，结果保持一致，与预期相符。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中勾选了&lt;code&gt;独立运行每个线程组&lt;/code&gt;，所以&lt;code&gt;线程组2&lt;/code&gt;与&lt;code&gt;线程组1&lt;/code&gt;互不干扰且顺序执行。因此，先执行&lt;code&gt;线程组2&lt;/code&gt;，待&lt;code&gt;线程组1&lt;/code&gt;中出现错误请求时，测试计划立即停止测试。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-8&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中取消勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-11&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/6.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了4次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中未勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，因此&lt;code&gt;线程组2&lt;/code&gt;与&lt;code&gt;线程组1&lt;/code&gt;互相干扰且并行执行。当&lt;code&gt;线程组1&lt;/code&gt;中出现错误请求时，&lt;code&gt;线程组2&lt;/code&gt;中的&lt;code&gt;与错误请求并行请求2&lt;/code&gt;也在执行，但不等&lt;code&gt;与错误请求并行请求2&lt;/code&gt;结束，测试计划立即停止测试，可以看出&lt;code&gt;与错误请求并行请求2&lt;/code&gt;的响应体中提示 Socket 关闭异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;测试计划&lt;/code&gt;中勾选了“独立运行每个线程组”，不建议非最后排序的&lt;code&gt;线程组&lt;/code&gt;中&lt;code&gt;取样器错误后执行的动作&lt;/code&gt;设置为&lt;code&gt;立即停止测试&lt;/code&gt;，它并不会按照你的预期去执行。&lt;/p&gt;
&lt;h4 id=&#34;单线程组-1&#34;&gt;&lt;em&gt;单线程组&lt;/em&gt;&lt;/h4&gt;
&lt;h5 id=&#34;修改示例脚本-9&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;未加固定定时器&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;前&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-12&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/10.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;先执行&lt;code&gt;未加固定定时器&lt;/code&gt;请求，待&lt;code&gt;错误请求1&lt;/code&gt;中出现错误请求时，测试计划立即停止测试。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-10&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;之后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;线程数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-13&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/11.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;3个用户同时执行&lt;code&gt;线程组1&lt;/code&gt;。3个用户中其中1个用户执行&lt;code&gt;错误请求1&lt;/code&gt;出现错误时，另外2个用户还在执行&lt;code&gt;错误请求之后请求1&lt;/code&gt;，
但不等执行完毕后，测试计划立即停止测试，可以看出&lt;code&gt;与错误请求并行请求1&lt;/code&gt;的响应体中提示 Socket 关闭异常。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-11&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;放在&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;循环数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-14&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/12.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;1个用户执行&lt;code&gt;线程组1&lt;/code&gt;3次。用户在执行第1次&lt;code&gt;错误请求1&lt;/code&gt;出现错误时，测试计划立即停止测试。&lt;/p&gt;
&lt;h3 id=&#34;停止线程&#34;&gt;&lt;em&gt;停止线程&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;设置&lt;code&gt;取样器错误后执行的动作&lt;/code&gt;为&lt;code&gt;停止线程&lt;/code&gt;时，当取样器在执行过程中遇到错误时，Jmeter会立即停止当前线程，但不会停止别的线程。&lt;/p&gt;
&lt;p&gt;这可以防止无效或无用的进一步测试，尤其是在错误可能导致后续操作无效的情况下。通过停止出现错误的线程，可以更准确地模拟用户行为和评估系统性能，因为现实世界中的用户通常在遇到问题时不会继续执行相同或相关的操作。
此外，停止出现错误的线程有助于简化错误分析，因为只有出现问题的线程会被停止，从而更容易识别和诊断问题。&lt;/p&gt;
&lt;h4 id=&#34;多线程组-2&#34;&gt;&lt;em&gt;多线程组&lt;/em&gt;&lt;/h4&gt;
&lt;h5 id=&#34;修改示例脚本-12&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-15&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/13.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果保持一致，与预期相符。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中勾选了&lt;code&gt;独立运行每个线程组&lt;/code&gt;，所以&lt;code&gt;线程组2&lt;/code&gt;与&lt;code&gt;线程组1&lt;/code&gt;互不干扰且顺序执行。因此，先执行&lt;code&gt;线程组1&lt;/code&gt;，待&lt;code&gt;线程组1&lt;/code&gt;中的用户出现错误请求时，&lt;code&gt;线程组1&lt;/code&gt;的用户线程被停止，接着执行&lt;code&gt;线程组2&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-13&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中取消勾选&lt;font style=&#34;background-color: #efef48&#34;&gt;独立运行每个线程组&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-16&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/14.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;测试计划&lt;/code&gt;中未勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，因此&lt;code&gt;线程组2&lt;/code&gt;与&lt;code&gt;线程组1&lt;/code&gt;互相干扰且并行执行。待&lt;code&gt;线程组1&lt;/code&gt;中的用户出现错误请求时，&lt;code&gt;线程组1&lt;/code&gt;的用户线程被停止，&lt;code&gt;线程组2&lt;/code&gt;继续执行。&lt;/p&gt;
&lt;h4 id=&#34;单线程组-2&#34;&gt;&lt;em&gt;单线程组&lt;/em&gt;&lt;/h4&gt;
&lt;h5 id=&#34;修改示例脚本-14&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;下的&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;线程数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;下添加一个&lt;font style=&#34;background-color: #efef48&#34;&gt;用户参数&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;添加步骤：&lt;code&gt;右键线程组-添加-前置处理器-用户参数&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加变量，名称：&lt;code&gt;dy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加三个用户值：&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;、&lt;code&gt;1111&lt;/code&gt;、&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;下响应断言的值,引用用户参数中的变量：&lt;font style=&#34;background-color: #efef48&#34;&gt;${dy}&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-17&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/15.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;每次运行时，三个用户的&lt;code&gt;响应断言&lt;/code&gt;值分别引用&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;、&lt;code&gt;1111&lt;/code&gt;、&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;，导致第二个用户执行&lt;code&gt;错误请求1&lt;/code&gt;时发生错误，
结束该用户线程，未执行&lt;code&gt;未加固定定时器&lt;/code&gt;。其他用户则未发生错误，可以执行&lt;code&gt;未加固定定时器&lt;/code&gt;。因此导致每次会有3个&lt;code&gt;错误请求1&lt;/code&gt;执行、但只有2个&lt;code&gt;未加固定定时器&lt;/code&gt;执行。&lt;/p&gt;
&lt;h5 id=&#34;修改示例脚本-15&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;桌面上新建一个&lt;font style=&#34;background-color: #efef48&#34;&gt;dy.txt&lt;/font&gt;文件,文本内容为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&amp;quot;code&amp;quot;:200,,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1111,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&amp;quot;code&amp;quot;:200,,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：三个参数不能在一行，每行一个参数。每个参数最后的逗号作用为分隔符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;下的&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;循环数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;下添加一个&lt;font style=&#34;background-color: #efef48&#34;&gt;CSV 数据文件设置&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;添加步骤：&lt;code&gt;右键线程组-添加-配置元件-CSV Data Set Config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件名：&lt;code&gt;dy.txt的路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件编码：&lt;code&gt;UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;变量名称：&lt;code&gt;dy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;下响应断言的值,引用用户参数中的变量：&lt;font style=&#34;background-color: #efef48&#34;&gt;${dy}&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;运行查看结果树-18&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/16.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;用户的三次循环的&lt;code&gt;响应断言&lt;/code&gt;值分别引用&lt;code&gt;CSV 数据文件设置&lt;/code&gt;的&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;、&lt;code&gt;1111&lt;/code&gt;、&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;，导致用户第二次循环时执行&lt;code&gt;错误请求1&lt;/code&gt;时发生错误，
结束该用户线程，未执行之后&lt;code&gt;未加固定定时器&lt;/code&gt;和第三次循环。&lt;/p&gt;
&lt;h3 id=&#34;启动下一进程循环&#34;&gt;&lt;em&gt;启动下一进程循环&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;设置取样器错误后执行的动作为&lt;code&gt;停止线程&lt;/code&gt;时，当取样器在执行过程中遇到错误时，Jmeter会立即停止当前线程本次执行进行当前线程的下次执行，主要应用于线程多次循环时。&lt;/p&gt;
&lt;p&gt;这可以防止无效或无用的进一步测试，尤其是在错误可能导致本次循环后续操作无效的情况下。通过停止出现错误的循环，进行下一次循环，可以更准确地模拟用户行为和评估系统性能，因为现实世界中的用户通常在流程操作中，开始或中间过程遇到问题时不会继续执行后续的操作，会从头开始操作。&lt;/p&gt;
&lt;h4 id=&#34;修改示例脚本-16&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;桌面上新建一个&lt;font style=&#34;background-color: #efef48&#34;&gt;dy.txt&lt;/font&gt;文件,文本内容为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&amp;quot;code&amp;quot;:200,,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1111,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&amp;quot;code&amp;quot;:200,,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：三个参数不能在一行，每行一个参数。每个参数最后的逗号作用为分隔符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;下的&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求之后请求1&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;循环数&lt;/font&gt;改为&lt;font style=&#34;background-color: #efef48&#34;&gt;3&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组1&lt;/font&gt;下添加一个&lt;font style=&#34;background-color: #efef48&#34;&gt;CSV 数据文件设置&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;添加步骤：&lt;code&gt;右键线程组-添加-配置元件-CSV Data Set Config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件名：&lt;code&gt;dy.txt的路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件编码：&lt;code&gt;UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;变量名称：&lt;code&gt;dy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6.&lt;font style=&#34;background-color: #efef48&#34;&gt;错误请求1&lt;/font&gt;下响应断言的值,引用用户参数中的变量：&lt;font style=&#34;background-color: #efef48&#34;&gt;${dy}&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;运行查看结果树-19&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/17.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;每次运行时，用户的三次循环的&lt;code&gt;响应断言&lt;/code&gt;值分别引用&lt;code&gt;CSV 数据文件设置&lt;/code&gt;的&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;、&lt;code&gt;1111&lt;/code&gt;、&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;，导致用户第二次循环时执行&lt;code&gt;错误请求1&lt;/code&gt;时发生错误，
该用户线程跳过本次循环，不在执行之后&lt;code&gt;未加固定定时器&lt;/code&gt;，直接进行第三次循环。&lt;/p&gt;
&lt;h3 id=&#34;继续&#34;&gt;&lt;em&gt;继续&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;设置取样器错误后执行的动作为&lt;code&gt;继续&lt;/code&gt;时，JMeter将在取样器执行错误时，忽略错误继续执行本线程的后续操作及执行其他线程。&lt;/p&gt;
&lt;p&gt;这种设置通常用于测试过程中，即使某些请求失败，也需要继续执行其他请求，以模拟真实用户的行为。&lt;/p&gt;
&lt;h4 id=&#34;运行查看结果树-20&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/18.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;每次运行时，虽然&lt;code&gt;错误请求1&lt;/code&gt;取样器发生错误，但还是执行&lt;code&gt;线程组1&lt;/code&gt;中后续的请求及&lt;code&gt;线程组2&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;结语-3&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;在 JMeter 中，&lt;code&gt;取样器错误后执行的动作&lt;/code&gt;提供了多种错误处理方式，可以根据不同的测试需求和场景来选择适当的处理方式。作为用户，在进行测试之前，必须仔细思考并制定可行的测试方案，以合理地运用这些错误处理方式。&lt;/p&gt;
&lt;p&gt;首先，了解应用程序的预期行为以及可能出现的错误情况是至关重要的。这有助于确定何时以及如何使用错误处理方式。例如，在模拟高负载时，可能会出现服务器超载或数据库连接超时等问题。为了使测试更加真实，可以选择在发生这些错误时重试请求，或者暂时停止并记录错误以便进一步分析。&lt;/p&gt;
&lt;p&gt;其次，考虑到测试的目标和性质。如果是性能测试，可能更关注系统的稳定性和吞吐量。在这种情况下，可能会选择忽略某些错误，继续进行测试以观察系统的性能表现。但是，如果是功能测试，那么对错误的处理可能会更为严格，以确保系统在各种情况下都能正确运行。&lt;/p&gt;
&lt;p&gt;最后，在选择错误处理方式时，还需考虑测试环境和资源的限制。例如，在模拟大量用户的情况下，频繁的重试可能会对系统产生额外的负担，导致测试结果不准确。因此，需要权衡利弊，并选择最适合当前情况的处理方式。&lt;/p&gt;
&lt;p&gt;作为用户，在测试之前应该仔细思考，并根据测试需求和场景制定合适的测试方案，以合理地运用 JMeter 中提供的错误处理方式。这样可以确保测试结果的准确性和可靠性，从而更好地评估应用程序的性能和功能。&lt;/p&gt;
&lt;h2 id=&#34;ramp-up时间&#34;&gt;&lt;em&gt;ramp-up时间&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;ramp-up时间用于设置启动所有线程所需要的时间。例如：线程数设置为10，ramp-up时间设置为100秒，那么JMeter将使用100秒使10个用户启动并运行，每个用户将在前一个用户启动后的10秒启动。&lt;/p&gt;
&lt;p&gt;如果ramp-up值设置得很小、线程数又设置得很大，刚开始执行测试时会对服务器产生很大的压力。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-4&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/QuickUse/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Jmeter教程快速开始api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request method is not GET!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;It is successful!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-4&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下，添加1个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;线程数：&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ramp-up时间：&lt;code&gt;30&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/QuickUse/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行查看结果树-21&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;用户1-1的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;Thread Name:线程组 1-1&lt;br&gt;Sample Start:&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-03-18 17:55:11 CST&lt;/font&gt;&lt;br&gt;Load time:3&lt;br&gt;Connect Time:1&lt;br&gt;Latency:2&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;用户1-2的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;Thread Name:线程组 1-2&lt;br&gt;Sample Start:&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-03-18 17:55:21 CST&lt;/font&gt;&lt;br&gt;Load time:7&lt;br&gt;Connect Time:2&lt;br&gt;Latency:6&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;用户1-3的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;Thread Name:线程组 1-3&lt;br&gt;Sample Start:&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-03-18 17:55:31 CST&lt;/font&gt;&lt;br&gt;Load time:4&lt;br&gt;Connect Time:1&lt;br&gt;Latency:4&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。每个用户的请求时间间隔10秒。&lt;/p&gt;
&lt;h2 id=&#34;same-user-on-each-iteration在每次迭代中使用相同的用户&#34;&gt;&lt;em&gt;same user on each iteration（在每次迭代中使用相同的用户）&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;没有研究出来它有什么用。经过我的测试，&lt;code&gt;same user on each iteration（在每次迭代中使用相同的用户）&lt;/code&gt;启用与否，作用是一样的。&lt;/p&gt;
&lt;p&gt;如读者对此有不同见解，欢迎与我联系，共同探讨。目前，我对此十分费解。&lt;/p&gt;
&lt;h2 id=&#34;延迟创建线程直到需要&#34;&gt;&lt;em&gt;延迟创建线程直到需要&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;当在JMeter中启用&lt;code&gt;延迟创建线程直到需要&lt;/code&gt;时，JMeter会根据预设的&lt;code&gt;Ramp-up时间&lt;/code&gt;动态地分配线程。假设&lt;code&gt;Ramp-up时间&lt;/code&gt;设置为20秒，&lt;code&gt;线程数&lt;/code&gt;为10，那么JMeter会在测试启动后立即创建第一个线程并开始请求处理。随后，每隔2秒，JMeter将创建下一个线程，直到所有线程都被启动。&lt;/p&gt;
&lt;p&gt;如果关闭“延迟创建线程直到需要”选项，JMeter会在测试开始时一次性创建所有线程。使用同样的参数，即在测试一开始，JMeter会立即创建全部的10个线程。这些线程会按照设定的“Ramp-up时间”进行执行，每个线程将间隔2秒启动。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;延迟创建线程直到需要&lt;/code&gt;这一配置的目的是为了应对测试机性能有限的情况。通过这种方式，可以避免在测试初期就创建所有线程，导致资源过度占用和可能的性能问题。这种方法有助于平滑地增加系统负载，同时防止资源瞬间紧张导致测试无法正常进行。&lt;/p&gt;
&lt;h2 id=&#34;调度器&#34;&gt;&lt;em&gt;调度器&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;调度器&lt;/code&gt;主要控制线程操作时间。启用&lt;code&gt;调度器&lt;/code&gt;后，可以输入&lt;code&gt;持续时间&lt;/code&gt;，&lt;code&gt;启动延迟&lt;/code&gt;来控制线程组的操作时间及线程组操作前的延迟时间。&lt;/p&gt;
&lt;p&gt;同时输入&lt;code&gt;持续时间&lt;/code&gt;，&lt;code&gt;启动延迟&lt;/code&gt;时，先计算&lt;code&gt;启动延迟&lt;/code&gt;，再计算&lt;code&gt;持续时间&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-5&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/QuickUse/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Jmeter教程快速开始api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request method is not GET!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;It is successful!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-5&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下，添加1个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;启用&lt;code&gt;调度器&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;启动延迟&lt;/code&gt;：&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;持续时间&lt;/code&gt;：&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下，添加2个&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称分别为：&lt;code&gt;请求1&lt;/code&gt;、&lt;code&gt;请求2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/QuickUse/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;请求2&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;固定定时器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;线程延迟（毫秒）：&lt;code&gt;3000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;中，添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行查看结果树-22&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/19.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;每次运行时，Jmeter都会延迟&lt;code&gt;3&lt;/code&gt;秒（看右上角）,然后再执行&lt;code&gt;线程组&lt;/code&gt;值。由于&lt;code&gt;持续时间&lt;/code&gt;设置的是&lt;code&gt;2&lt;/code&gt;秒，&lt;code&gt;线程组&lt;/code&gt;只会持续执行&lt;code&gt;2&lt;/code&gt;秒，而固定定时器的延迟是&lt;code&gt;3&lt;/code&gt;，所以不会执行&lt;code&gt;请求2&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;修改示例脚本-17&#34;&gt;&lt;em&gt;修改示例脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;禁用&lt;font style=&#34;background-color: #efef48&#34;&gt;请求2&lt;/font&gt;中的&lt;font style=&#34;background-color: #efef48&#34;&gt;固定定时器&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行查看结果树-23&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/ThreadGroup/20.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;连续运行了3次，结果一致且与预期一致。取样器在线程组中按从上至下的顺序执行。&lt;/p&gt;
&lt;p&gt;每次运行时，Jmeter都会延迟&lt;code&gt;3&lt;/code&gt;秒（看右上角）,然后再执行&lt;code&gt;线程组&lt;/code&gt;值。虽然&lt;code&gt;持续时间&lt;/code&gt;设置的是&lt;code&gt;2&lt;/code&gt;秒，&lt;code&gt;线程组&lt;/code&gt;只会持续执行&lt;code&gt;2&lt;/code&gt;秒，但没有了固定定时器的延迟，也会执行&lt;code&gt;请求2&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;结语-4&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;线程组的关键任务之一是定义并发用户的行为，包括设置线程数、循环次数、启动延迟等关键参数。通过适当配置线程组，测试人员可以模拟多用户在系统中同时执行任务的场景，从而评估系统的性能和稳定性。&lt;/p&gt;
&lt;p&gt;通过灵活使用setup线程组、线程组、tearDown线程组、开放模型线程组，配置前置操作、主要操作、后置操作，更能真实、详细的评估系统。&lt;/p&gt;
&lt;p&gt;线程组在JMeter中扮演着至关重要的角色，通过深入理解和合理配置线程组，读者可以更好地模拟实际用户行为，为性能测试提供更准确的结果。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Jmeter测试计划</title>
        <link>https://thelonelypatient.github.io/Jiang/p/jmeter%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/</link>
        <pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/p/jmeter%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/</guid>
        <description>&lt;img src="https://thelonelypatient.github.io/Jiang/img/Jmeter/0.png" alt="Featured image of post Jmeter测试计划" /&gt;&lt;h1 id=&#34;测试计划&#34;&gt;&lt;em&gt;测试计划&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;可以将测试计划可视化为用于运行测试的JMeter脚本。测试计划由测试元素组成，例如线程组，逻辑控制器，样本生成控制器，监听器，定时器，断言和配置元素。 每个测试计划中至少应有一个线程组。 我们可以根据要求添加或删除元素。 前言中的快速开始就是一个测试计划。&lt;/p&gt;
&lt;p&gt;测试计划控制面板中的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;名称和注释&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;用户定义的变量&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;独立运行每个线程组&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;函数测试模式&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;添加目录或jar包到classpath&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;用户定义的变量&#34;&gt;&lt;em&gt;用户定义的变量&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;当在测试计划的多个部分中存在重复的数值时，可以通过&lt;code&gt;用户定义的变量&lt;/code&gt;来提供更灵活的设置。&lt;/p&gt;
&lt;p&gt;测试计划控制面板中的&lt;code&gt;用户定义的变量&lt;/code&gt;的作用域覆盖整个测试计划。&lt;/p&gt;
&lt;p&gt;你可以通过&lt;code&gt;${变量名称}&lt;/code&gt;的方式来引用这些变量。这种方式允许你在不同的请求或操作中使用相同的数值，从而更加方便地维护和修改。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码&#34;&gt;&lt;em&gt;示例接口代码：&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/TestPlan/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testplan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Jmeter教程测试计划-用户定义的变量api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request method is not POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;UserDefinedVariables&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request body is error!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Your request parameters is &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;UserDefinedVariables:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                         &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;UserDefinedVariables&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;面板中添加&lt;font style=&#34;background-color: #efef48&#34;&gt;用户定义的变量&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称：&lt;code&gt;UserDefinedVariables&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;值随意输入：&lt;code&gt;我是用户定义的变量&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/TestPlan/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;消息体数据:&lt;code&gt;{&amp;quot;UserDefinedVariables&amp;quot;:&amp;quot;${UserDefinedVariables}&amp;quot;}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP信息头管理器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;右键HTTP请求-添加-配置元件-HTTP信息头管理器，添加信息头，指定请求体类型&lt;/p&gt;
&lt;p&gt;名称：&lt;code&gt;Content-Type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;值：&lt;code&gt;application/json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/0.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行查看结果树&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;




&lt;style&gt;
	.massage {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.result-h {
		display: inline-grid;
		grid-template-columns: 10% 90%;
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;
	}
&lt;/style&gt;
&lt;div class=&#34;massage&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;请求数据&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;headers&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;Connection: keep-alive&lt;br&gt;Content-Type: application/json&lt;br&gt;Content-Length: 58&lt;br&gt;Host: 127.0.0.1:5000&lt;br&gt;User-Agent: Apache-HttpClient/4.5.14 (Java/20.0.2)&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;body&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;POST http://127.0.0.1:5000/TestPlan/&lt;br&gt;&lt;br&gt;POST data:&lt;br&gt;&lt;br&gt;{&#34;UserDefinedVariables&#34;:&#34;&lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;我是用户定义的变量&lt;/font&gt;&#34;}&lt;br&gt;&lt;br&gt;&lt;br&gt;[no cookies]&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;




&lt;style&gt;
	.massage {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.result-h {
		display: inline-grid;
		grid-template-columns: 10% 90%;
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;
	}
&lt;/style&gt;
&lt;div class=&#34;massage&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;响应数据&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;headers&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;HTTP/1.1 200 OK&lt;br&gt;Server: Werkzeug/3.0.1 Python/3.12.1&lt;br&gt;Date: Mon, 15 Jan 2024 06:19:08 GMT&lt;br&gt;Content-Type: application/json&lt;br&gt;Content-Length: 132&lt;br&gt;Connection: close&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;body&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;{&#34;code&#34;: 200,&#34;data&#34;: &#34;Your request parameters is :{&#34;UserDefinedVariables:我是用户定义的变量&#34;}&#34;}&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;结语&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;可以清晰地看出，接口请求参数中调用了&lt;code&gt;用户定义的变量&lt;/code&gt;的值:&lt;code&gt;我是用户定义的变量&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此外，JMeter提供的配置元件中也包含&lt;code&gt;用户定义的变量&lt;/code&gt;元件，通过&lt;code&gt;测试计划/线程组/取样器-添加-配置元件-用户定义的变量&lt;/code&gt;进行添加。用法与测试计划面板中的&lt;code&gt;用户定义的变量&lt;/code&gt;一致，不同之处在于作用域。&lt;/p&gt;
&lt;p&gt;测试计划面板中&lt;code&gt;用户定义的变量&lt;/code&gt;具有整个测试计划范围的作用，而配置元件中的&lt;code&gt;用户定义的变量&lt;/code&gt;则根据其位置确定作用范围。&lt;/p&gt;
&lt;p&gt;举例来说，在测试计划下添加的&lt;code&gt;用户定义的变量&lt;/code&gt;将在整个测试计划中生效，与测试计划面板中的&lt;code&gt;用户定义的变量&lt;/code&gt;作用范围一致。然而，如果&lt;code&gt;用户定义的变量&lt;/code&gt;位于取样器中，其作用范围将仅限于该特定取样器内。这种灵活性允许在不同配置元件中使用变量，使其作用范围更具体而有针对性。&lt;/p&gt;
&lt;p&gt;建议使用更自由的配置元件中的&lt;code&gt;用户定义的变量&lt;/code&gt; 。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;独立运行每个线程组&#34;&gt;&lt;em&gt;独立运行每个线程组&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;当一个测试计划下有多个线程组时，且这些线程组都处于执行状态时，可能会使用测试计划中的&lt;code&gt;独立运行每个线程组&lt;/code&gt;勾选框，以防止各个线程组之间相互影响。&lt;/p&gt;
&lt;p&gt;在这种情况下，通过勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，确保每个线程组在执行时都是相互独立的。这意味着它们将不会共享任何变量或资源，从而避免潜在的相互干扰。&lt;/p&gt;
&lt;p&gt;这个选项的使用对于模拟多个并发场景或测试不同业务流程的情况非常重要。它确保每个线程组在测试计划中都能够独立运行，从而更准确地模拟真实世界的使用情境，提高测试的可靠性和准确性。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-1&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/TestPlan1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testplan1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;# 接口设置了休眠三秒，即接口在接收到请求数据三秒后，返回响应数据。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; 请求方式错误！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;处理完毕&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-1&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加两个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称依次为：&lt;code&gt;线程组1&lt;/code&gt;、&lt;code&gt;线程组2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下皆添加&lt;font style=&#34;background-color: #efef48&#34;&gt;取样器&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称与对应线程组一致：&lt;code&gt;线程组1&lt;/code&gt;、&lt;code&gt;线程组2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求地址一致：&lt;code&gt;HTTP://127.0.0.1:5000/TestPlan1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式一致：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行查看结果树-1&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&#34;不勾选独立运行每个线程组运行结果&#34;&gt;&lt;em&gt;不勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，运行结果&lt;/em&gt;&lt;/h4&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;线程组1的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:线程组1 1-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-01-16 11:19:34 CST&lt;/font&gt;&lt;br&gt;Load time:3004&lt;br&gt;Connect Time:1&lt;br&gt;Latency:3004&lt;br&gt;Size in bytes:231&lt;br&gt;Sent bytes:210&lt;br&gt;Headers size in bytes:165&lt;br&gt;Body size in bytes:66&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;线程组2的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:线程组2 2-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-01-16 11:19:34 CST&lt;/font&gt;&lt;br&gt;Load time:3003&lt;br&gt;Connect Time:1&lt;br&gt;Latency:3003&lt;br&gt;Size in bytes:231&lt;br&gt;Sent bytes:210&lt;br&gt;Headers size in bytes:165&lt;br&gt;Body size in bytes:66&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/2.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Sample Start 是请求发出的时间，可以观察到两个线程组内的 HTTP 请求在同一时刻发出，即 &lt;code&gt;2024-01-16 11:19:34&lt;/code&gt;。因为两个线程组是并发、随机执行的。&lt;/p&gt;
&lt;h4 id=&#34;勾选独立运行每个线程组运行结果&#34;&gt;&lt;em&gt;勾选&lt;code&gt;独立运行每个线程组&lt;/code&gt;，运行结果&lt;/em&gt;&lt;/h4&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;线程组1的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:线程组1 1-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-01-16 11:32:52 CST&lt;/font&gt;&lt;br&gt;Load time:3004&lt;br&gt;Connect Time:1&lt;br&gt;Latency:3004&lt;br&gt;Size in bytes:231&lt;br&gt;Sent bytes:210&lt;br&gt;Headers size in bytes:165&lt;br&gt;Body size in bytes:66&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;



&lt;style&gt;
	.sampler {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.sampler-h {
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;

	}
	
	.sampler-h span {
		margin-left: 15%;
		display: inline-block;  
	}	

&lt;/style&gt;
&lt;div class=&#34;sampler&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;线程组2的取样器结果&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;sampler-h&#34;&gt;
			&lt;span&gt;hread Name:线程组2 2-1&lt;br&gt;Sample Start: &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;2024-01-16 11:32:55 CST&lt;/font&gt;&lt;br&gt;Load time:3003&lt;br&gt;Connect Time:1&lt;br&gt;Latency:3003&lt;br&gt;Size in bytes:231&lt;br&gt;Sent bytes:210&lt;br&gt;Headers size in bytes:165&lt;br&gt;Body size in bytes:66&lt;br&gt;Sample Count:1&lt;br&gt;Error Count:0&lt;br&gt;Data type (&#34;text&#34;|&#34;bin&#34;|&#34;&#34;):text&lt;br&gt;Response code:200&lt;br&gt;Response message:OK&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/3.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Sample Start 是请求发出的时间，可以观察到两个线程组内的 HTTP 请求并非在同一时刻发出。具体而言，HTTP 请求1的请求发出时间是 &lt;code&gt;2024-01-16 11:32:52&lt;/code&gt;，而 HTTP 请求2的请求发出时间是 &lt;code&gt;2024-01-16 11:32:55&lt;/code&gt;。两者之间的时间差正好为三秒，与接口休眠的三秒相符，这表明两个线程组是顺序执行的。&lt;/p&gt;
&lt;h3 id=&#34;结语-1&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;当勾选了&lt;code&gt;独立运行每个线程组&lt;/code&gt;选项时，能够确保测试计划中的相同类型线程组按照顺序执行。在某些特定的测试情况下，这个选项非常有用。相反，若未勾选 &lt;code&gt;独立运行每个线程组&lt;/code&gt;时，线程组是并发执行。&lt;/p&gt;
&lt;p&gt;但线程组中的多个取样器并不会并发，而是在较短时间内发出全部请求，尤其是在取样器数量较多的情况下。&lt;/p&gt;
&lt;p&gt;因此，在模拟高并发时，如果需要多线程组、所有取样器请求并发，建议在测试计划中添加&lt;code&gt;同步定时器（Synchronizing Timer）&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;同步定时器（Synchronizing Timer）&lt;/code&gt;可以确保在并发场景下的同一时间点触发多个线程组中多个取样器的请求，以更真实地模拟多用户同时访问系统的情况。这样的设置有助于提高测试的准确性和可靠性，使测试更符合实际应用场景。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;主线程结束后运行teardown线程组&#34;&gt;&lt;em&gt;主线程结束后运行tearDown线程组&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;该选项主要适用于在取样器错误后配置的普通线程，并指定了在错误发生后要执行的动作，如停止测试或立即停止测试。&lt;/p&gt;
&lt;p&gt;勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;后，当普通线程由于取样器错误而导致线程结束执行时，系统会继续执行 tearDown 线程。这意味着即使在测试中发生了错误，系统仍会在整个测试结束前执行 tearDown 线程，以确保在测试运行结束时执行一些清理或必要的操作。&lt;/p&gt;
&lt;p&gt;需要注意的是，在 JMeter 中，普通线程组的执行优先级大于 tearDown 线程组，因此 tearDown 线程组将会等待所有普通线程组执行完毕后才会执行。&lt;/p&gt;
&lt;p&gt;这一设置非常有用，可以确保在测试过程中出现错误时执行必要的清理步骤，同时允许根据具体情况选择在错误发生后是立即停止测试还是允许测试计划中其他线程组或线程继续执行。&lt;/p&gt;
&lt;h3 id=&#34;示例接口代码-2&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/TestPlan1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testplan1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;# 接口设置了休眠三秒，即接口在接收到请求数据三秒后，返回响应数据。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; 请求方式错误！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;处理完毕&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例jmeter脚本-2&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;*&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;在取样器错误后要执行的动作,勾选&lt;code&gt;停止测试&lt;/code&gt;或&lt;code&gt;立即停止测试&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;tearDown线程组&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;和&lt;font style=&#34;background-color: #efef48&#34;&gt;tearDown线程组&lt;/font&gt;下添加同样的&lt;font style=&#34;background-color: #efef48&#34;&gt;http请求&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;名称分别为：&lt;code&gt;线程组请求&lt;/code&gt;，&lt;code&gt;tearDown线程组请求&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/TestPlan1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组请求&lt;/font&gt;取样器下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;响应断言&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;添加，输入值：&lt;code&gt;1111&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：响应断言用于匹配实际响应信息，作为验证接口响应的一种手段。例如，示例接口响应的是 &lt;code&gt;{&#39;code&#39;: 200, &#39;data&#39;: &#39;处理完毕&#39;}&lt;/code&gt;，而添加的断言是 &lt;code&gt;1111&lt;/code&gt;，这两者无法匹配，则可以判断该取样器请求存在错误。&lt;/p&gt;
&lt;h3 id=&#34;运行查看结果树-2&#34;&gt;&lt;em&gt;运行，查看结果树&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&#34;不勾选主线程结束后运行teardown线程组运行结果&#34;&gt;&lt;em&gt;不勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;，运行结果&lt;/em&gt;&lt;/h4&gt;




&lt;style&gt;
	.massage {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.result-h {
		display: inline-grid;
		grid-template-columns: 10% 90%;
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;
	}
&lt;/style&gt;
&lt;div class=&#34;massage&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;响应数据&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;headers&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;HTTP/1.1 200 OK&lt;br&gt;Server: Werkzeug/3.0.1 Python/3.12.1&lt;br&gt;Date: Fri, 16 Jan 2024 14:52:02 GMT&lt;br&gt;Content-Type: application/json&lt;br&gt;Content-Length: 47&lt;br&gt;Connection: close&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;body&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt; &lt;font style=&#34;background-color: #ec5350; color: black;&#34;&gt;{&#34;code&#34;: 200,&#34;data&#34;: &#34;处理完毕&#34;}&lt;/font&gt;&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/4.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;因为不勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;，而且响应体&lt;code&gt;{&amp;quot;code&amp;quot;: 200,&amp;quot;data&amp;quot;: &amp;quot;处理完毕&amp;quot;}&lt;/code&gt;与断言&lt;code&gt;1111&lt;/code&gt;无法匹配，响应断言判断该取样器请求发生错误，所以只有线程组被执行完毕后，而 tearDown 线程组并未被执行。&lt;/p&gt;
&lt;p&gt;此时，修改响应断言为：&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/5.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;即使不勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;，因为响应体&lt;code&gt;{&amp;quot;code&amp;quot;: 200,&amp;quot;data&amp;quot;: &amp;quot;处理完毕&amp;quot;}&lt;/code&gt;与断言&lt;code&gt;{&amp;quot;code&amp;quot;:200,&lt;/code&gt;匹配，响应断言判断该取样器请求正常，所以线程组被执行完毕后，执行 tearDown 线程组。&lt;/p&gt;
&lt;h4 id=&#34;勾选主线程结束后运行teardown线程组运行结果&#34;&gt;&lt;em&gt;勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;,运行结果&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;响应断言改回为：&lt;code&gt;1111&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/TestPlan/6.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;即使响应断言判断请求发生错误，因为勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;,线程组被执行后，tearDown 线程组紧接被执行。&lt;/p&gt;
&lt;h3 id=&#34;结语-2&#34;&gt;&lt;em&gt;结语&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;在确保测试环境的可靠性和稳定性方面，通过勾选&lt;code&gt;主线程结束后运行tearDown线程组&lt;/code&gt;以及配置线程组中的取样器错误后执行的动作，可以在主线程结束后执行 tearDown 线程组，从而进行一些关键的清理和还原操作。这一设置在测试流程中发生错误或异常情况时，能够确保系统状态的正确还原，为后续测试提供稳定的基础。&lt;/p&gt;
&lt;p&gt;具体而言，主线程结束后执行 tearDown 线程组的步骤可以被理解为测试执行的最后一道关口，确保在测试结束时执行特定的操作。通过配置线程组中的取样器错误后执行的动作，例如&lt;code&gt;停止测试&lt;/code&gt;或&lt;code&gt;立即停止测试&lt;/code&gt;，可以更加灵活地处理测试中的异常情况。&lt;/p&gt;
&lt;p&gt;这样的设置在以下方面发挥关键作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;环境清理： tearDown 线程组可以包含用于清理测试过程中创建的临时数据、资源或连接的操作。这有助于保持测试环境的整洁和可重复性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源释放： 如果测试过程中涉及到占用系统资源的操作，例如文件打开、网络连接等，tearDown 线程组可以负责释放这些资源，避免资源泄露和系统负担。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据还原： 在测试期间可能对数据库或配置文件进行了修改，tearDown 线程组可以负责将这些更改还原，确保下一次测试能够在干净的环境中进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误处理： 配置线程组中的取样器错误后执行的动作可以根据具体需求选择停止测试或立即停止测试。这样的灵活性使得能够在测试遇到问题时及时采取适当的措施，防止进一步的不稳定性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过精心配置这些选项，可以确保测试系统的可靠性和稳定性，同时为测试人员提供了在测试结束时进行必要清理和还原操作的机会，以确保下一次测试能够在一致的基础上进行。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;函数测试模式&#34;&gt;&lt;em&gt;函数测试模式&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;若选择了此选项，并且监听组件（比如“查看结果树”）配置了将结果保存到文件中，JMeter将每次的请求结果记录到文件中。值得注意的是，这种做法相对消耗资源，在负载测试中并不建议勾选。然而，在平时脚本调试的情况下，可以考虑启用该选项。&lt;/p&gt;
&lt;p&gt;这样的设置主要适用于需要详细记录每次请求结果的情况，以便后续分析或排查问题。在负载测试中，由于可能生成大量的结果数据，将其全部保存到文件可能导致性能和资源开销的增加，因此需要谨慎使用。&lt;/p&gt;
&lt;p&gt;总体而言，这一功能的选择应该根据具体需求和测试目标来决定。在进行性能测试时，特别是在高并发负载下，建议避免勾选该选项以保持测试的高效性。然而，在脚本开发和调试阶段，启用此选项可以帮助更全面地了解每次请求的细节，有助于及时发现和解决问题。&lt;/p&gt;
&lt;p&gt;实际应用场景相对有限，因此在本文中不进行详细演示。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;添加目录或jar包到classpath&#34;&gt;&lt;em&gt;添加目录或jar包到classpath&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;添加文件或 JAR 包功能主要用于调用外部的 JAR 包。当脚本需要引用外部的 Java 文件或 JAR 包时，可以通过将 JAR 包的路径添加到此功能中。这样，在 Beanshell 脚本中就可以通过 import 语句导入外部 JAR 包，并直接调用其中的方法。&lt;/p&gt;
&lt;p&gt;在后续的内容中，当涉及到 Beanshell 时，将详细阐述如何使用这一功能。这个特性提供了一种扩展 JMeter 功能的途径，使得用户可以方便地集成和调用外部 Java 类库，从而实现更复杂和灵活的测试脚本。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;em&gt;总结&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;JMeter的测试计划是测试工作的主要组织结构，它定义了测试的执行流程、配置和执行的参数。在测试计划中，包括了多个关键组件，如线程组、tearDown线程组、HTTP取样器、响应断言等，它们构成了一个完整的测试计划。&lt;/p&gt;
&lt;p&gt;当你执行测试时，添加的所有所需组件和元件组成了一个有机整体，即一个完整的测试计划。这个测试计划反映了你对系统性能和功能的验证方式以及测试场景的设计。&lt;/p&gt;
&lt;p&gt;本篇主要探讨了测试计划组件面板中各元素的使用，这包括了配置用户定义的变量、定义并发用户行为的线程组、定义进测试后清理的tearDown线程组，这些元素的组合和配置，直接影响着测试的有效性和准确性。&lt;/p&gt;
&lt;p&gt;在JMeter中，设计一个强大且高效的测试计划需要综合考虑系统特性、测试目标和性能需求。合理配置这些组件，有效运用各种元素，是确保测试计划成功执行和提取有价值信息的关键步骤。&lt;/p&gt;
&lt;p&gt;在下一篇章中，EtherealBoyJiang将引领读者深入探讨线程组的重要性和使用方法。线程组作为JMeter测试计划的核心组件之一，对于模拟并发用户的行为至关重要。&lt;/p&gt;
&lt;div&gt;&lt;hr&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Jmeter环境配置</title>
        <link>https://thelonelypatient.github.io/Jiang/p/jmeter%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/p/jmeter%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;img src="https://thelonelypatient.github.io/Jiang/img/Jmeter/0.png" alt="Featured image of post Jmeter环境配置" /&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h1 id=&#34;jmeter-环境安装及配置&#34;&gt;JMeter 环境安装及配置&lt;/h1&gt;
&lt;p&gt;在使用 JMeter 之前，需要配置相应的环境，包括安装JDK和JMeter。&lt;/p&gt;
&lt;p&gt;首先，了解一下JDK，它就是Java的开发工具包。&lt;/p&gt;
&lt;p&gt;JMeter 是使用 Java 编写的。一般来说，只需要安装 JRE（Java 运行时环境）就可以运行 JMeter，因为 JRE 包含了运行 Java 应用程序所需的组件。那么为什么建议安装 JDK 呢？&lt;/p&gt;
&lt;p&gt;如果你想要在 JMeter 中使用一些插件、进行脚本开发、编译测试计划等高级功能，安装 JDK 可能会更有帮助，因为 JDK 包含了 JRE，并且还提供了编译 Java 代码所需的工具，比如 javac。此外，一些场景下，比如进行 HTTPS 压力测试，需要使用 JDK 中的 keytool 工具。&lt;/p&gt;
&lt;p&gt;确保正确配置JDK和JMeter环境，可以让你更灵活地应对不同的测试需求&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;jdk&#34;&gt;&lt;em&gt;JDK&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1下载jdk&#34;&gt;&lt;em&gt;1.下载JDK&lt;/em&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;a1 href=&#34;https://www.oracle.com/java/technologies/downloads/#jdk21-windows&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;zhengti&#34;&gt;
        &lt;a href=&#34;https://www.oracle.com/java/technologies/downloads/#jdk21-windows&#34;&gt;
            &lt;div class=&#34;wenzi&#34;&gt;
                &lt;div class=&#34;linkk&#34;&gt;
                    &lt;div class=&#34;namee&#34;&gt;JDK下载地址&lt;/div&gt;&lt;div class=&#34;descc&#34;&gt;示例环境为Windows，读者应根据实际环境下载JDK的安装包。推荐下载exe文件，安装方便快捷。&lt;/div&gt;&lt;/div&gt;
        &lt;/a&gt;&lt;div class=&#34;linktext&#34;&gt;https://www.oracle.com/java/technologies/downloads/#jdk21-windows&lt;/div&gt;

        &lt;/div&gt;
        &lt;div class=&#34;daimg&#34;&gt;
            &lt;img class=&#34;link-card-img&#34; loading=&#34;lazy&#34; src=&#34;https://api.thumbnail.ws/api/ab41148c7048bd95441b7b09816cbd5db1ed220134d3/thumbnail/get?width=720&amp;url=https%3a%2f%2fwww.oracle.com%2fjava%2ftechnologies%2fdownloads%2f%23jdk21-windows&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/a1&gt;

&lt;style&gt;
    a1 {
        display: flex;
        flex-direction: column;
    }
    
    .zhengti {
        margin: auto;
        padding-top: 4%;
        padding-right: 4%;
        padding-bottom: 4%;
        padding-left: 4%;
        width: 100%;
        display: flex;
        align-items: left;
        flex-direction: row;
        border: 1px solid #e5e7eb;
        border-radius: 20px;
        background-color: #ffffff;
        transition: border 0.3s ease-in-out;
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .wenzi {
        display: flex;
        align-items: left;
        flex-direction: column;
        flex: 2;
    }
    
    .zhengti:hover {
        transform: scale(1.03);
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .linkk {
        display: flex;
        flex-direction: column;
    }
    
    .iconn {
        display: flex;
        align-items: center;
    }
    
    .iconn1 {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5em;
        margin-bottom: 0.2em;
    }
    
    .namee {
        font-size: 1.7rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--card-text-color-main);
    }
    
    .descc {
        font-size: 1.3rem;
        color: #9ca3af;
        margin-bottom: 0.5rem;
    }
    
    .linktext {
        font-size: 0.9rem;
        color: #9ca3af;
    }
     
    
    .link-card-icoon {
        width: 16px;
        height: 16px;
        margin-right: 0.5rem;
    }
     
    
    .daimg {
        display: flex;
        flex-direction: row;
        flex: 1;
        align-self: right;
    }
    
    .link-card-img {
        display: block;
        height: auto;
        max-height: 200px;
        width: 100%;
         
        object-fit: cover;
        max-width: 50%;
        margin-right: 2px;
        border-radius: 0.25rem;
    }
    
    a1:hover {
        background-color: var(--color-zoom-bg);
        border: 1px solid var(--theme);
    }
    
    @media (max-width:900px) {
        a1 {
            max-height: 25em;
            overflow-y: auto;
            padding-right: 4%;
        }
        .zhengti {
            display: flex;
            flex-direction: column;
        }
    }
    
    [data-scheme=&#34;dark&#34;] {
        .zhengti {
            background-color: #161b22;
            border: 1px solid #30363d;
        }
        .descc {
            color: #9ca3af;
        }
        .linktext {
            color: #9ca3af;
        }
    }
&lt;/style&gt;

&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;2安装jdk&#34;&gt;&lt;em&gt;2.安装JDK&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;建议在安装之前在&lt;code&gt;D盘或C盘&lt;/code&gt;下新建一个下新建一个&lt;code&gt;Tools&lt;/code&gt; 文件夹。在安装 JDK 时，修改安装目录为&lt;code&gt;Tools&lt;/code&gt;文件夹。这样做的好处在于方便管理和配置环境变量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;接下来就是一直下一步就行。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;配置jdk系统变量环境变量&#34;&gt;&lt;em&gt;配置JDK系统变量、环境变量&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;系统变量和环境变量是计算机系统中的两个重要概念，它们用于存储和管理系统或应用程序运行过程中需要使用的信息。&lt;/p&gt;
&lt;p&gt;系统变量是指在操作系统级别上设置的一些全局信息，用于控制和影响整个计算机系统的行为。
这些变量通常由操作系统或系统管理员配置，用于存储系统范围的配置参数和信息。系统变量可以影响所有用户和应用程序的行为。
如&lt;code&gt;PATH&lt;/code&gt;是一个常见的系统变量，它存储了操作系统在哪些目录中查找可执行文件的信息。&lt;/p&gt;
&lt;p&gt;环境变量是在操作系统或应用程序运行过程中设置的一些动态变量，用于影响当前进程的行为。
环境变量提供了一种将信息传递给正在运行的程序的方法，以便程序根据这些变量的值来调整其行为。
如&lt;code&gt;PATH&lt;/code&gt;变量中的值就是执行文件的环境变量。&lt;/p&gt;
&lt;p&gt;总结来说，系统变量是操作系统级别的全局配置，而环境变量是在运行过程中用于传递信息给正在执行的程序的配置。在许多情况下，环境变量的值可以由用户或程序员进行配置，以影响特定应用程序或进程的行为。&lt;/p&gt;
&lt;div&gt;  




&lt;div style=&#34;display: inline-grid; grid-template-columns: 7% 93%; padding: 15px; background-color: #f8f8f8; border: 1px solid #ccc; border-radius: 10px; margin-bottom: 0; width: 99%;&#34;&gt;
    &lt;div style=&#34;display: flex; align-items: center; justify-content: center;&#34;&gt;
        &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;icon icon-tabler icon-tabler-alert-square-rounded&#34; width=&#34;44&#34; height=&#34;44&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#ff2825&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
            &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34;/&gt;
            &lt;path d=&#34;M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z&#34; /&gt;
            &lt;path d=&#34;M12 8v4&#34; /&gt;
            &lt;path d=&#34;M12 16h.01&#34; /&gt;
        &lt;/svg&gt;
    &lt;/div&gt;

    &lt;div style=&#34;display: flex; align-items: center; justify-content: flex-start; margin-left: 15px; font-size: 1.5rem; width: 100%; height: 100%;&#34;&gt;
不要随意改动环境变量，否则可能造成系统死机。
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h4 id=&#34;新建java_home系统变量&#34;&gt;&lt;em&gt;新建JAVA_HOME系统变量&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;右键此电脑-属性-高级系统设置-环境变量，系统变量-新建。&lt;/p&gt;
&lt;p&gt;变量名：&lt;code&gt;JDK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;变量值：&lt;code&gt;C:\Tools\JDK&lt;/code&gt;（JDK安装目录）  或者浏览目录进行选择（Windows11）&lt;/p&gt;
&lt;p&gt;然后确定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h4 id=&#34;path中新建java_home的环境环境&#34;&gt;&lt;em&gt;Path中新建JAVA_HOME的环境环境&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;系统变量中找到Path，选中，点击编辑，进入Path系统变量窗口，新建两条环境变量。&lt;/p&gt;
&lt;p&gt;第一条：&lt;code&gt;%JAVA_HOME%\bin;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第二条：&lt;code&gt;%JAVA_HOME%\jre\bin;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ps：windows11好像不需要输入最后的&lt;/p&gt;
&lt;p&gt;然后一路确定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;&lt;em&gt;Jmeter&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;JMeter 是一个独立的 Java 应用程序，它不依赖于系统注册表或其他系统级配置。所以它能够在不同操作系统上运行而无需进行安装。只需要下载完成后，将 ZIP 文件解压缩到指定的目录。
在解压缩后的目录中找到 JMeter 启动脚本（例如 jmeter.bat 或 jmeter.sh），运行该脚本以启动 JMeter。&lt;/p&gt;
&lt;h3 id=&#34;下载jmeterzip包&#34;&gt;&lt;em&gt;下载JmeterZIP包&lt;/em&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;a1 href=&#34;https://archive.apache.org/dist/jmeter/binaries/&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;zhengti&#34;&gt;
        &lt;a href=&#34;https://archive.apache.org/dist/jmeter/binaries/&#34;&gt;
            &lt;div class=&#34;wenzi&#34;&gt;
                &lt;div class=&#34;linkk&#34;&gt;
                    &lt;div class=&#34;namee&#34;&gt;历史版本Jmeter下载地址&lt;/div&gt;&lt;div class=&#34;descc&#34;&gt;示例环境为Windows，读者应根据实际系统环境及JDK版本，下载Jmeter的安装包。下载页面写有JDK版本要求。Windows环境推荐zip包，Linux环境推荐tgz包。&lt;/div&gt;&lt;/div&gt;
        &lt;/a&gt;&lt;div class=&#34;linktext&#34;&gt;https://archive.apache.org/dist/jmeter/binaries/&lt;/div&gt;

        &lt;/div&gt;
        &lt;div class=&#34;daimg&#34;&gt;
            &lt;img class=&#34;link-card-img&#34; loading=&#34;lazy&#34; src=&#34;https://api.thumbnail.ws/api/ab41148c7048bd95441b7b09816cbd5db1ed220134d3/thumbnail/get?width=720&amp;url=https%3a%2f%2farchive.apache.org%2fdist%2fjmeter%2fbinaries%2f&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/a1&gt;

&lt;style&gt;
    a1 {
        display: flex;
        flex-direction: column;
    }
    
    .zhengti {
        margin: auto;
        padding-top: 4%;
        padding-right: 4%;
        padding-bottom: 4%;
        padding-left: 4%;
        width: 100%;
        display: flex;
        align-items: left;
        flex-direction: row;
        border: 1px solid #e5e7eb;
        border-radius: 20px;
        background-color: #ffffff;
        transition: border 0.3s ease-in-out;
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .wenzi {
        display: flex;
        align-items: left;
        flex-direction: column;
        flex: 2;
    }
    
    .zhengti:hover {
        transform: scale(1.03);
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .linkk {
        display: flex;
        flex-direction: column;
    }
    
    .iconn {
        display: flex;
        align-items: center;
    }
    
    .iconn1 {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5em;
        margin-bottom: 0.2em;
    }
    
    .namee {
        font-size: 1.7rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--card-text-color-main);
    }
    
    .descc {
        font-size: 1.3rem;
        color: #9ca3af;
        margin-bottom: 0.5rem;
    }
    
    .linktext {
        font-size: 0.9rem;
        color: #9ca3af;
    }
     
    
    .link-card-icoon {
        width: 16px;
        height: 16px;
        margin-right: 0.5rem;
    }
     
    
    .daimg {
        display: flex;
        flex-direction: row;
        flex: 1;
        align-self: right;
    }
    
    .link-card-img {
        display: block;
        height: auto;
        max-height: 200px;
        width: 100%;
         
        object-fit: cover;
        max-width: 50%;
        margin-right: 2px;
        border-radius: 0.25rem;
    }
    
    a1:hover {
        background-color: var(--color-zoom-bg);
        border: 1px solid var(--theme);
    }
    
    @media (max-width:900px) {
        a1 {
            max-height: 25em;
            overflow-y: auto;
            padding-right: 4%;
        }
        .zhengti {
            display: flex;
            flex-direction: column;
        }
    }
    
    [data-scheme=&#34;dark&#34;] {
        .zhengti {
            background-color: #161b22;
            border: 1px solid #30363d;
        }
        .descc {
            color: #9ca3af;
        }
        .linktext {
            color: #9ca3af;
        }
    }
&lt;/style&gt;

&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a1 href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;zhengti&#34;&gt;
        &lt;a href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;&gt;
            &lt;div class=&#34;wenzi&#34;&gt;
                &lt;div class=&#34;linkk&#34;&gt;
                    &lt;div class=&#34;namee&#34;&gt;最新版本Jmeter下载地址&lt;/div&gt;&lt;div class=&#34;descc&#34;&gt;示例环境为Windows，读者应根据实际系统环境及JDK版本，下载Jmeter的安装包。下载页面写有JDK版本要求。Windows环境推荐zip包，Linux环境推荐tgz包。&lt;/div&gt;&lt;/div&gt;
        &lt;/a&gt;&lt;div class=&#34;linktext&#34;&gt;https://jmeter.apache.org/download_jmeter.cgi&lt;/div&gt;

        &lt;/div&gt;
        &lt;div class=&#34;daimg&#34;&gt;
            &lt;img class=&#34;link-card-img&#34; loading=&#34;lazy&#34; src=&#34;https://api.thumbnail.ws/api/ab41148c7048bd95441b7b09816cbd5db1ed220134d3/thumbnail/get?width=720&amp;url=https%3a%2f%2fjmeter.apache.org%2fdownload_jmeter.cgi&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/a1&gt;

&lt;style&gt;
    a1 {
        display: flex;
        flex-direction: column;
    }
    
    .zhengti {
        margin: auto;
        padding-top: 4%;
        padding-right: 4%;
        padding-bottom: 4%;
        padding-left: 4%;
        width: 100%;
        display: flex;
        align-items: left;
        flex-direction: row;
        border: 1px solid #e5e7eb;
        border-radius: 20px;
        background-color: #ffffff;
        transition: border 0.3s ease-in-out;
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .wenzi {
        display: flex;
        align-items: left;
        flex-direction: column;
        flex: 2;
    }
    
    .zhengti:hover {
        transform: scale(1.03);
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .linkk {
        display: flex;
        flex-direction: column;
    }
    
    .iconn {
        display: flex;
        align-items: center;
    }
    
    .iconn1 {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5em;
        margin-bottom: 0.2em;
    }
    
    .namee {
        font-size: 1.7rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--card-text-color-main);
    }
    
    .descc {
        font-size: 1.3rem;
        color: #9ca3af;
        margin-bottom: 0.5rem;
    }
    
    .linktext {
        font-size: 0.9rem;
        color: #9ca3af;
    }
     
    
    .link-card-icoon {
        width: 16px;
        height: 16px;
        margin-right: 0.5rem;
    }
     
    
    .daimg {
        display: flex;
        flex-direction: row;
        flex: 1;
        align-self: right;
    }
    
    .link-card-img {
        display: block;
        height: auto;
        max-height: 200px;
        width: 100%;
         
        object-fit: cover;
        max-width: 50%;
        margin-right: 2px;
        border-radius: 0.25rem;
    }
    
    a1:hover {
        background-color: var(--color-zoom-bg);
        border: 1px solid var(--theme);
    }
    
    @media (max-width:900px) {
        a1 {
            max-height: 25em;
            overflow-y: auto;
            padding-right: 4%;
        }
        .zhengti {
            display: flex;
            flex-direction: column;
        }
    }
    
    [data-scheme=&#34;dark&#34;] {
        .zhengti {
            background-color: #161b22;
            border: 1px solid #30363d;
        }
        .descc {
            color: #9ca3af;
        }
        .linktext {
            color: #9ca3af;
        }
    }
&lt;/style&gt;

&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;解压到目录&#34;&gt;&lt;em&gt;解压到目录&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;建议解压到D:\Tools目录下,方便管理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;汉化jmeter界面&#34;&gt;&lt;em&gt;汉化Jmeter界面&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;修改Jmeter/bin/jmeter.properties，40行增加&lt;code&gt;language=zh_CN&lt;/code&gt;。然后保存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;发送启动文件到桌面快捷方式&#34;&gt;&lt;em&gt;发送启动文件到桌面快捷方式&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/10.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;启动jmeter&#34;&gt;&lt;em&gt;启动Jmeter&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;双击桌面上的 JMeter 快捷方式，等待脚本运行，然后 JMeter 界面将会显示出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/11.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;快速使用&#34;&gt;&lt;em&gt;快速使用&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;我们可以使用最简单的JMeter脚本来快速进行一次接口请求。这个脚本包括测试计划、线程组、取样器（Sampler）以及查看结果器（View Results Tree）。&lt;/p&gt;
&lt;p&gt;在测试计划中，我们定义了整个测试的基本设置。线程组用于模拟用户，而取样器则代表了具体的请求。查看结果器则用于查看请求的详细结果。&lt;/p&gt;
&lt;p&gt;通过这个简单的脚本，我们能够迅速进行一次接口请求测试，为后续更复杂的测试做好基础工作。这个基本结构也为我们学习更多JMeter的高级功能打下了基础。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;示例接口&#34;&gt;&lt;em&gt;示例接口&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@api.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/QuickUse/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Jmeter教程快速开始api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ERROR: The request method is not GET!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;It is successful!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;示例jmeter脚本&#34;&gt;&lt;em&gt;示例Jmeter脚本&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;右键测试计划-添加-线程（用户）-线程组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;查看结果树&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;右键测试计划-添加-监听器-查看结果树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组&lt;/font&gt;下添加&lt;font style=&#34;background-color: #efef48&#34;&gt;HTTP请求&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;右键线程组-添加-取样器-HTTP请求&lt;/p&gt;
&lt;p&gt;请求地址：&lt;code&gt;HTTP://127.0.0.1:5000/QuickUse/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请求方式：&lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/12.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;运行点击上方绿色三角形查看结果树&#34;&gt;&lt;em&gt;运行（点击上方绿色三角形），查看结果树&lt;/em&gt;&lt;/h3&gt;




&lt;style&gt;
	.massage {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.result-h {
		display: inline-grid;
		grid-template-columns: 10% 90%;
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;
	}
&lt;/style&gt;
&lt;div class=&#34;massage&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;请求数据&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;headers&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;Connection: keep-alive&lt;br&gt;Host: 127.0.0.1:5000&lt;br&gt;User-Agent: Apache-HttpClient/4.5.14 (Java/20.0.2)&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;body&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;GET http://127.0.0.1:5000/QuickUse/&lt;br&gt;&lt;br&gt;GET data:&lt;br&gt;&lt;br&gt;&lt;br&gt;[no cookies]&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;




&lt;style&gt;
	.massage {
		display: grid; 
		padding: 15px; 
		background-color: #f8f8f8; 
		border: 1px solid #ccc; 
		border-radius: 10px; 
		margin-bottom: 0; width: 99%;
	}
	.result-h {
		display: inline-grid;
		grid-template-columns: 10% 90%;
		border-top: 1px solid #b5b1b185;
		padding: 3% 0;
	}
&lt;/style&gt;
&lt;div class=&#34;massage&#34;&gt;
	&lt;div style=&#34;text-align: center;&#34;&gt;&lt;span&gt;respond&lt;/span&gt;&lt;/div&gt;
	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;headers&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;HTTP/1.1 200 OK&lt;br&gt;Server: Werkzeug/3.0.1 Python/3.12.1&lt;br&gt;Date: Mon, 15 Jan 2024 03:39:26 GMT&lt;br&gt;Content-Type: application/json&lt;br&gt;Content-Length: 40&lt;br&gt;Connection: close&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;div class=&#34;result-h&#34;&gt;
		&lt;div style=&#34;display: grid; place-items: center;&#34;&gt;&lt;span&gt;body&lt;/span&gt;&lt;/div&gt;
		&lt;div style=&#34;display: grid;align-items: center;padding-left: 4%;&#34;&gt;
			&lt;span&gt;{&#34;code&#34;: 200, &#34;data&#34;: &#34;It is successful!&#34;}&lt;/span&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/EnvConfig/1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;结尾&#34;&gt;&lt;em&gt;结尾&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;本篇主要介绍JMeter的环境配置以及初体验，为后续的JMeter之旅做好准备。在这一章节中，我们将了解如何配置JMeter的环境，以及如何进行简单的接口测试。&lt;/p&gt;
&lt;p&gt;接下来的篇章EtherealBoyJiang将深入探讨JMeter的测试计划，帮助读者更好地利用这个强大的性能测试工具。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;hr&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Jmeter前言</title>
        <link>https://thelonelypatient.github.io/Jiang/p/jmeter%E5%89%8D%E8%A8%80/</link>
        <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/p/jmeter%E5%89%8D%E8%A8%80/</guid>
        <description>&lt;img src="https://thelonelypatient.github.io/Jiang/img/Jmeter/0.png" alt="Featured image of post Jmeter前言" /&gt;&lt;h1 id=&#34;前言&#34;&gt;&lt;em&gt;前言&lt;/em&gt;&lt;/h1&gt;
&lt;h2 id=&#34;为什么要撰写这样一个教程呢&#34;&gt;&lt;em&gt;为什么要撰写这样一个教程呢？&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;深入学习Jmeter&lt;/p&gt;
&lt;p&gt;温故而知新，通过编写教程，我将更深入地学习JMeter。尽管我已经使用JMeter很长时间，但还有许多元件我并不十分了解。为了创作一个详尽且实用的JMeter教程，我需要精通JMeter的各个元件。因此，编写教程的过程成为了我的学习过程，通过反复回顾和整理知识，我能够更全面地掌握JMeter的使用技巧&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分享知识&lt;/p&gt;
&lt;p&gt;我深信知识具有强大力量，而这种力量应该共享。我愿意将我的所学分享给志同道合的朋友——也就是你们。通过分享知识，我不仅能够为他人提供帮助，还能够在这个过程中体验到一种内在的满足感。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结识朋友&lt;/p&gt;
&lt;p&gt;这是我的第一个教程，后续也会编辑更多的教程。希望能通过这一行为与各位取得交流，成为朋友，与大家一起讨论更多的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;关于jmeter&#34;&gt;&lt;em&gt;关于Jmeter&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。&lt;/p&gt;
&lt;p&gt;JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。&lt;/p&gt;
&lt;p&gt;另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;我们为什么使用jmeter&#34;&gt;&lt;em&gt;我们为什么使用Jmeter&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开源免费，基于Java编写，可集成到其他系统可拓展各个功能插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持接口测试，压力测试等多种功能，支持录制回放，入门简单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相较于自己编写框架活其他开源工具，有较为完善的UI界面，便于接口调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多平台支持，可在Linux，Windows，Mac上运行selenium 是一套完整的web应用程序测试系统，包含了测试的录制（selenium IDE）,编写及运行（Selenium Remote Control）和测试的并行处理（Selenium Grid）。Selenium的核心Selenium Core基于JsUnit，完全由JavaScript编写，因此可以用于任何支持JavaScript的浏览器上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;主要组件介绍&#34;&gt;&lt;em&gt;主要组件介绍&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;测试计划(Test Plan)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;是使用JMeter进行测试的起点，它是其它JMeter测试元件的容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;线程组(Thread Group)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;代表一定数量的并发用户，它可以用来模拟并发用户发送请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;取样器(sampler)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;定义实际的请求内容，被线程组包含，我们主要用HTTP请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;监听器(Listener)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;负责收集测试结果，同时也被告知了结果显示的方式。我们常用的包括：聚合报告、察看结果树、用表格查看结果，都支持将结果数据写入文件。其他的添加上去看看就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;逻辑控制器(Logic Controller)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;可以自定义JMeter发送请求的行为逻辑，它与Sampler结合使用可以模拟复杂的请求序列。&lt;/p&gt;
&lt;p&gt;其分为循环控制器和事务控制器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;断言(Assertions)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;可以用来判断请求响应的结果是否如用户所期望的。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;配置元件(Config Element)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;维护Sampler需要的配置信息，并根据实际的需要会修改请求的内容。我们主要在参数化中用到CSV Data Set Config。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;前置处理器(Pre Processors)和后置处理器(Post Processors)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;负责在生成请求之前和之后完成工作。前置处理器常常用来修改请求的设置，后置处理器则常常用来处理响应的数据。我们主要在动态关联中用到后置处理器的正则表达式提取器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;定时器(Timer)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;负责定义请求之间的延迟间隔。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&#34;background-color: #efef48&#34;&gt;执行顺序(Execution sequence)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;配置元件、前置处理器、定时器、取样器、后置处理器、断言、监听器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;工作流程&#34;&gt;&lt;em&gt;工作流程&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;JMeter通过模拟一组用户将请求发送到目标服务器。 随后，收集数据以通过各种格式计算目标服务器的统计和显示性能度量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thelonelypatient.github.io/Jiang/Jiang/img/Jmeter/Preface/0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;内容引用&#34;&gt;&lt;em&gt;内容引用&lt;/em&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;a1 href=&#34;https://www.emqx.com/zh/blog/introduction-to-jmeter-test-components#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E7%BB%84&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;zhengti&#34;&gt;
        &lt;a href=&#34;https://www.emqx.com/zh/blog/introduction-to-jmeter-test-components#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E7%BB%84&#34;&gt;
            &lt;div class=&#34;wenzi&#34;&gt;
                &lt;div class=&#34;linkk&#34;&gt;
                    &lt;div class=&#34;namee&#34;&gt;Jmeter测试组件介绍|EMQ&lt;/div&gt;&lt;div class=&#34;descc&#34;&gt;本系列教程中部分组件介绍文本引用于此&lt;/div&gt;&lt;/div&gt;
        &lt;/a&gt;&lt;div class=&#34;linktext&#34;&gt;https://www.emqx.com/zh/blog/introduction-to-jmeter-test-components#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E7%BB%84&lt;/div&gt;

        &lt;/div&gt;
        &lt;div class=&#34;daimg&#34;&gt;
            &lt;img class=&#34;link-card-img&#34; loading=&#34;lazy&#34; src=&#34;https://api.thumbnail.ws/api/ab41148c7048bd95441b7b09816cbd5db1ed220134d3/thumbnail/get?width=720&amp;url=https%3a%2f%2fwww.emqx.com%2fzh%2fblog%2fintroduction-to-jmeter-test-components%23%25E4%25B8%2580-%25E7%25BA%25BF%25E7%25A8%258B%25E7%25BB%2584&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/a1&gt;

&lt;style&gt;
    a1 {
        display: flex;
        flex-direction: column;
    }
    
    .zhengti {
        margin: auto;
        padding-top: 4%;
        padding-right: 4%;
        padding-bottom: 4%;
        padding-left: 4%;
        width: 100%;
        display: flex;
        align-items: left;
        flex-direction: row;
        border: 1px solid #e5e7eb;
        border-radius: 20px;
        background-color: #ffffff;
        transition: border 0.3s ease-in-out;
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .wenzi {
        display: flex;
        align-items: left;
        flex-direction: column;
        flex: 2;
    }
    
    .zhengti:hover {
        transform: scale(1.03);
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .linkk {
        display: flex;
        flex-direction: column;
    }
    
    .iconn {
        display: flex;
        align-items: center;
    }
    
    .iconn1 {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5em;
        margin-bottom: 0.2em;
    }
    
    .namee {
        font-size: 1.7rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--card-text-color-main);
    }
    
    .descc {
        font-size: 1.3rem;
        color: #9ca3af;
        margin-bottom: 0.5rem;
    }
    
    .linktext {
        font-size: 0.9rem;
        color: #9ca3af;
    }
     
    
    .link-card-icoon {
        width: 16px;
        height: 16px;
        margin-right: 0.5rem;
    }
     
    
    .daimg {
        display: flex;
        flex-direction: row;
        flex: 1;
        align-self: right;
    }
    
    .link-card-img {
        display: block;
        height: auto;
        max-height: 200px;
        width: 100%;
         
        object-fit: cover;
        max-width: 50%;
        margin-right: 2px;
        border-radius: 0.25rem;
    }
    
    a1:hover {
        background-color: var(--color-zoom-bg);
        border: 1px solid var(--theme);
    }
    
    @media (max-width:900px) {
        a1 {
            max-height: 25em;
            overflow-y: auto;
            padding-right: 4%;
        }
        .zhengti {
            display: flex;
            flex-direction: column;
        }
    }
    
    [data-scheme=&#34;dark&#34;] {
        .zhengti {
            background-color: #161b22;
            border: 1px solid #30363d;
        }
        .descc {
            color: #9ca3af;
        }
        .linktext {
            color: #9ca3af;
        }
    }
&lt;/style&gt;

&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a1 href=&#34;https://www.niaoge.com/jmeter/jmeter-index.html&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;zhengti&#34;&gt;
        &lt;a href=&#34;https://www.niaoge.com/jmeter/jmeter-index.html&#34;&gt;
            &lt;div class=&#34;wenzi&#34;&gt;
                &lt;div class=&#34;linkk&#34;&gt;
                    &lt;div class=&#34;namee&#34;&gt;鸟哥教程&lt;/div&gt;&lt;div class=&#34;descc&#34;&gt;本系列教程中部分组件介绍文本引用于此&lt;/div&gt;&lt;/div&gt;
        &lt;/a&gt;&lt;div class=&#34;linktext&#34;&gt;https://www.niaoge.com/jmeter/jmeter-index.html&lt;/div&gt;

        &lt;/div&gt;
        &lt;div class=&#34;daimg&#34;&gt;
            &lt;img class=&#34;link-card-img&#34; loading=&#34;lazy&#34; src=&#34;https://api.thumbnail.ws/api/ab41148c7048bd95441b7b09816cbd5db1ed220134d3/thumbnail/get?width=720&amp;url=https%3a%2f%2fwww.niaoge.com%2fjmeter%2fjmeter-index.html&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/a1&gt;

&lt;style&gt;
    a1 {
        display: flex;
        flex-direction: column;
    }
    
    .zhengti {
        margin: auto;
        padding-top: 4%;
        padding-right: 4%;
        padding-bottom: 4%;
        padding-left: 4%;
        width: 100%;
        display: flex;
        align-items: left;
        flex-direction: row;
        border: 1px solid #e5e7eb;
        border-radius: 20px;
        background-color: #ffffff;
        transition: border 0.3s ease-in-out;
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .wenzi {
        display: flex;
        align-items: left;
        flex-direction: column;
        flex: 2;
    }
    
    .zhengti:hover {
        transform: scale(1.03);
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .linkk {
        display: flex;
        flex-direction: column;
    }
    
    .iconn {
        display: flex;
        align-items: center;
    }
    
    .iconn1 {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5em;
        margin-bottom: 0.2em;
    }
    
    .namee {
        font-size: 1.7rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--card-text-color-main);
    }
    
    .descc {
        font-size: 1.3rem;
        color: #9ca3af;
        margin-bottom: 0.5rem;
    }
    
    .linktext {
        font-size: 0.9rem;
        color: #9ca3af;
    }
     
    
    .link-card-icoon {
        width: 16px;
        height: 16px;
        margin-right: 0.5rem;
    }
     
    
    .daimg {
        display: flex;
        flex-direction: row;
        flex: 1;
        align-self: right;
    }
    
    .link-card-img {
        display: block;
        height: auto;
        max-height: 200px;
        width: 100%;
         
        object-fit: cover;
        max-width: 50%;
        margin-right: 2px;
        border-radius: 0.25rem;
    }
    
    a1:hover {
        background-color: var(--color-zoom-bg);
        border: 1px solid var(--theme);
    }
    
    @media (max-width:900px) {
        a1 {
            max-height: 25em;
            overflow-y: auto;
            padding-right: 4%;
        }
        .zhengti {
            display: flex;
            flex-direction: column;
        }
    }
    
    [data-scheme=&#34;dark&#34;] {
        .zhengti {
            background-color: #161b22;
            border: 1px solid #30363d;
        }
        .descc {
            color: #9ca3af;
        }
        .linktext {
            color: #9ca3af;
        }
    }
&lt;/style&gt;

&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;h2 id=&#34;示例接口代码&#34;&gt;&lt;em&gt;示例接口代码&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;本系列文章中所有示例接口皆由python编写，python版本为3.12.1，如要使用示例接口请安装python3.12.1与pycharm。&lt;/p&gt;
&lt;div&gt;
&lt;a1 href=&#34;&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;zhengti&#34;&gt;
        &lt;a href=&#34;&#34;&gt;
            &lt;div class=&#34;wenzi&#34;&gt;
                &lt;div class=&#34;linkk&#34;&gt;
                    &lt;div class=&#34;namee&#34;&gt;下载地址&lt;/div&gt;&lt;div class=&#34;descc&#34;&gt;压缩包内包含源码和使用说明&lt;/div&gt;&lt;/div&gt;
        &lt;/a&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/a1&gt;

&lt;style&gt;
    a1 {
        display: flex;
        flex-direction: column;
    }
    
    .zhengti {
        margin: auto;
        padding-top: 4%;
        padding-right: 4%;
        padding-bottom: 4%;
        padding-left: 4%;
        width: 100%;
        display: flex;
        align-items: left;
        flex-direction: row;
        border: 1px solid #e5e7eb;
        border-radius: 20px;
        background-color: #ffffff;
        transition: border 0.3s ease-in-out;
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .wenzi {
        display: flex;
        align-items: left;
        flex-direction: column;
        flex: 2;
    }
    
    .zhengti:hover {
        transform: scale(1.03);
        box-shadow: 2px 4px 16px rgba(0, 0, 0, .05);
    }
    
    .linkk {
        display: flex;
        flex-direction: column;
    }
    
    .iconn {
        display: flex;
        align-items: center;
    }
    
    .iconn1 {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5em;
        margin-bottom: 0.2em;
    }
    
    .namee {
        font-size: 1.7rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--card-text-color-main);
    }
    
    .descc {
        font-size: 1.3rem;
        color: #9ca3af;
        margin-bottom: 0.5rem;
    }
    
    .linktext {
        font-size: 0.9rem;
        color: #9ca3af;
    }
     
    
    .link-card-icoon {
        width: 16px;
        height: 16px;
        margin-right: 0.5rem;
    }
     
    
    .daimg {
        display: flex;
        flex-direction: row;
        flex: 1;
        align-self: right;
    }
    
    .link-card-img {
        display: block;
        height: auto;
        max-height: 200px;
        width: 100%;
         
        object-fit: cover;
        max-width: 50%;
        margin-right: 2px;
        border-radius: 0.25rem;
    }
    
    a1:hover {
        background-color: var(--color-zoom-bg);
        border: 1px solid var(--theme);
    }
    
    @media (max-width:900px) {
        a1 {
            max-height: 25em;
            overflow-y: auto;
            padding-right: 4%;
        }
        .zhengti {
            display: flex;
            flex-direction: column;
        }
    }
    
    [data-scheme=&#34;dark&#34;] {
        .zhengti {
            background-color: #161b22;
            border: 1px solid #30363d;
        }
        .descc {
            color: #9ca3af;
        }
        .linktext {
            color: #9ca3af;
        }
    }
&lt;/style&gt;

&lt;br&gt;
&lt;/div&gt;
&lt;h2 id=&#34;说明&#34;&gt;&lt;em&gt;说明&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;本文基于JDK21、Jmeter-5.6.3测试编写，可能不适用于历史版本及未来版本。&lt;/p&gt;
&lt;p&gt;如果Jmeter在后续的新版本中有所变化，或者文中有错漏的地方，请联系EtherealBoyJiang，EtherealBoyJiang感激不尽。&lt;/p&gt;
&lt;h2 id=&#34;结尾&#34;&gt;&lt;em&gt;结尾&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;对于测试人员来说，JMeter是一款非常强大的接口测试工具，尤其在性能测试方面表现出色。&lt;/p&gt;
&lt;p&gt;希望读者们通过EtherealBoyJiang编写的系列教程，能够熟练掌握JMeter的使用。本系列教程旨在为读者提供全面而深入的理解，使读者将能够深入了解JMeter的各项功能，并掌握如何在性能测试中有效地利用这些功能。提高读者的技能水平，能够更自信地应对各类测试任务。能够为项目的成功实施提供有力的支持。&lt;/p&gt;
&lt;p&gt;对EtherealBoyJiang来说，能够帮助到读者是一件莫大的荣幸，期待更多读者通过本系列教程获得成长。&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;hr&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>关于</title>
        <link>https://thelonelypatient.github.io/Jiang/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;
&lt;p&gt;一个热爱分享的人，你可以叫我Jiang或者Ethereal Boy Jiang。&lt;/p&gt;
&lt;p&gt;我从事软件测试工程师行业，目前任职于锐菲网络。这是一家氛围很好的公司。&lt;/p&gt;
&lt;p&gt;熟练掌握的语言就是Python了，计划后面学习GoLand。&lt;/p&gt;
&lt;p&gt;电子邮件：ethereal_&lt;a class=&#34;link&#34; href=&#34;mailto:jiang@163.com&#34; &gt;jiang@163.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;关于本博客&#34;&gt;关于本博客&lt;/h2&gt;
&lt;p&gt;分享技术心得，记录生活感悟，助力他人成长。这三点推动我我创建了本博客。&lt;/p&gt;
&lt;p&gt;在我的往日的学习中遇到的很多困难，很多是通过网上的高质量内容的帮助，才得以解决。&lt;/p&gt;
&lt;p&gt;因此我也决定分享自己的思考和心得，希望可以为高质量的中文内容搭一块砖。&lt;/p&gt;
&lt;p&gt;可能也会分享一些生活中的记录、感悟。&lt;/p&gt;
&lt;p&gt;关于更新呢，我并不能保证更新速度，只能说尽量了。&lt;/p&gt;
&lt;p&gt;感谢您的访问，如果您有任何建议或疑问，请随时与我联系。希望我的博客能为您带来价值。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://thelonelypatient.github.io/Jiang/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://thelonelypatient.github.io/Jiang/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/search/</guid>
        <description></description>
        </item>
        <item>
        <title>友链</title>
        <link>https://thelonelypatient.github.io/Jiang/%E5%8F%8B%E9%93%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://thelonelypatient.github.io/Jiang/%E5%8F%8B%E9%93%BE/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
